 variables:
  REGISTRY_PREFIX: nexus.spaceapplications.com/
  INFUSE_REGISTRY_PREFIX: repository/infuse/
  CI_IMAGE_TAG: ${REGISTRY_PREFIX}${INFUSE_REGISTRY_PREFIX}cdff-ci
  USER_IMAGE_TAG: ${REGISTRY_PREFIX}${INFUSE_REGISTRY_PREFIX}cdff-user
  CI_FILE: Dockerfile.ci
  USER_FILE: Dockerfile.user
  
 stages:
  - docker
  - autogeneration
  - build
  - test
  - deploy

 generate-docker-ci:
   services:
    - docker:dind
   image: nexus.spaceapplications.com/repository/infuse/docker-builder
   stage: docker
   script:
    - cd Tools/Docker   
    - tag_ci=$(grep "LABEL version=" $CI_FILE | perl -pe '($_)=/([0-9]+([.][0-9]+)+)/')
    - latest_tag_ci=$(curl -d 'hook_private_key=ea9dc697-5bc9-4a43-96aa-6257f2fda70e&key='$CI_PROJECT_NAME'-ci' https://hook.io/datastore/get | tr -d '"')
    - echo latest_tag_ci $latest_tag_ci , tag_ci  $tag_ci
    - dockerize(){ if [[ ! $latest_tag_ci < $tag_ci ]]; then return 1; else return 0; fi } 
    - dockerize || (echo "no need to build new docker image" && exit 0)
    - dockerize && docker login -u $DOCKER_USER -p $DOCKER_PASSWORD $REGISTRY_PREFIX
    - dockerize && docker pull $CI_IMAGE_TAG':'$latest_tag_ci
    - dockerize && docker build -t $CI_IMAGE_TAG':'$tag_ci -f ./$CI_FILE .
    - dockerize && docker push $CI_IMAGE_TAG':'$tag_ci
    - dockerize && docker tag $CI_IMAGE_TAG':'$tag_ci $CI_IMAGE_TAG':'latest
    - dockerize && docker push $CI_IMAGE_TAG':'latest
    - dockerize && curl -d 'hook_private_key=ea9dc697-5bc9-4a43-96aa-6257f2fda70e&key='$CI_PROJECT_NAME'-ci&value='$tag_ci https://hook.io/datastore/set
    - exit 0

 generate-docker-user:
   services:
    - docker:dind
   image: nexus.spaceapplications.com/repository/infuse/docker-builder
   stage: docker
   script: 
    - cd Tools/Docker   
    - tag_user=$(grep "LABEL version=" $USER_FILE | perl -pe '($_)=/([0-9]+([.][0-9]+)+)/')
    - latest_tag_user=$(curl -d 'hook_private_key=ea9dc697-5bc9-4a43-96aa-6257f2fda70e&key='$CI_PROJECT_NAME'-user' https://hook.io/datastore/get | tr -d '"')
    - echo latest_tag_user $latest_tag_user , tag_user  $tag_user
    - dockerize(){ if [[ ! $latest_tag_user < $tag_user ]]; then return 1; else return 0; fi } 
    - dockerize || (echo 'no need to build new docker image ' && exit 0)
    - dockerize && docker login -u $DOCKER_USER -p $DOCKER_PASSWORD $REGISTRY_PREFIX
    - dockerize && docker pull $USER_IMAGE_TAG':'$latest_tag_user
    - dockerize && docker build -t $USER_IMAGE_TAG':'$tag_user -f $USER_FILE .
    - dockerize && docker push $USER_IMAGE_TAG':'$tag_user
    - dockerize && docker tag $USER_IMAGE_TAG':'$tag_user $USER_IMAGE_TAG':'latest
    - dockerize && docker push $USER_IMAGE_TAG':'latest
    - dockerize && curl -d 'hook_private_key=ea9dc697-5bc9-4a43-96aa-6257f2fda70e&key='$CI_PROJECT_NAME'-user&value='$tag_user https://hook.io/datastore/set 
    - exit 0

 autogeneration:
  image: '${CI_IMAGE_TAG}:latest'
  stage : autogeneration
  script:
      - cd Tools/ASN.1
      - ./GeneratorScript.sh
  artifacts:
    paths:
      - Common/Types/C/
    expire_in: 4 weeks


 .build-cdff_template: &build-cdff
    image: '${CI_IMAGE_TAG}:latest'
    script:
        - "pwd"
        - "mkdir build"
        - "cd build"
        - "cmake -DCMAKE_INSTALL_PREFIX=./ .."
        - "CPUS=$(grep --count --regexp=^processor /proc/cpuinfo)"
        - "JOBS=$((CPUS/2))"
        - "JOBS=$((JOBS > 0 ? JOBS : 1))"
        - "make --jobs=${JOBS} --output-sync=target"

 build-cdff:
  <<: *build-cdff
  stage: build
  artifacts:
    paths:
      - build/
    expire_in: 4 weeks

 static_analysis:
  <<: *build-cdff
  stage: test
  before_script:
      - patch -p0 < Tools/CPPCheck/CMakeLists.patch"
  after_script:
      - echo should convert CPPCheck-report.txt and publish to coverage pages
  artifacts:
    paths:
      - CPPCheck-report.txt
    expire_in: 4 weeks


 unit_tests:
  image: '${CI_IMAGE_TAG}:latest'
  stage: test
  script:
      - cd build/Tests/UnitTests
      - ./cdff-unit-tests




 deploy_staging:
  image: '${CI_IMAGE_TAG}:latest'
  stage: deploy
  script:
      - echo "Deploy to staging server"
  only:
      - master
