/**
 * @addtogroup DFPCs
 * @{
 */

#ifndef ABSOLUTELOCALIZATION_INTERFACE_HPP
#define ABSOLUTELOCALIZATION_INTERFACE_HPP

#include "DFPCCommonInterface.hpp"
#include <Types/C/TransformWithCovariance.h>
#include <Types/C/Pointcloud.h>
#include <Types/C/Frame.h>

namespace CDFF
{
namespace DFPC
{
    /**
     * Absolute localization that replies on orbital imagery and a Pointcloud and Orthoimage generated by the rover.
     */
    class AbsoluteLocalizationInterface : public DFPCCommonInterface
    {
        public:

            AbsoluteLocalizationInterface();
            virtual ~AbsoluteLocalizationInterface();

            /**
             * Send value to input port "lidarPC"
             * @param lidarPC: Point cloud for rover DEM generation
             */
            virtual void lidarPCInput(const asn1SccPointcloud& data);
            /**
             * Send value to input port "estimatedPose"
             * @param estimatedPose: Estimated pose from localization
             */
            virtual void estimatedPoseInput(const asn1SccTransformWithCovariance& data);
            /**
             * Send value to input port "orthoImage"
             * @param orthoImage: Orthoimage frame
             */
            virtual void orthoImageInput(const asn1SccFrame& data);
            /**
             * Send value to input port "orbitalImage"
             * @param orbitalImage: Orbital image frame
             */
            virtual void orbitalImageInput(const asn1SccFrame& data);

            /**
             * Query value from output port "finalPose"
             * @return finalPose: Final estimated absolute pose
             */
            virtual const asn1SccTransformWithCovariance& finalPoseOutput() const;


        protected:

            asn1SccPointcloud inLidarPC;
            asn1SccTransformWithCovariance inEstimatedPose;
            asn1SccFrame inOrthoImage;
            asn1SccFrame inOrbitalImage;
            asn1SccTransformWithCovariance outFinalPose;

    };
}
}

#endif //  ABSOLUTELOCALIZATION_INTERFACE_HPP

/** @} */
