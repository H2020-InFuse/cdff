/**
 * @addtogroup DFPCs
 * @{
 */

#ifndef LIDARMAPBASEDLOCALIZATION_INTERFACE_HPP
#define LIDARMAPBASEDLOCALIZATION_INTERFACE_HPP

#include "DFPCCommonInterface.hpp"
#include <Pointcloud.h>
#include <TransformWithCovariance.h>

namespace dfpc_ci
{
    /**
     * Localization based on LIDAR pointcloud and rover odometry.
     */
    class LIDARMapBasedLocalizationInterface : public DFPCCommonInterface
    {
        public:

            LIDARMapBasedLocalizationInterface();
            virtual ~LIDARMapBasedLocalizationInterface();

            /**
             * Send value to input port "lPC"
             * @param lPC: Point cloud generated by LIDAR
             */
            virtual void lPCInput(const asn1SccPointcloud& data);
            /**
             * Send value to input port "odoPose"
             * @param odoPose: Estimated pose from odometry
             */
            virtual void odoPoseInput(const asn1SccTransformWithCovariance& data);

            /**
             * Query value from output port "lidarPose"
             * @return lidarPose: Pose estimate based on LIDAR
             */
            virtual const asn1SccTransformWithCovariance& lidarPoseOutput() const;


        protected:

            asn1SccPointcloud inLPC;
            asn1SccTransformWithCovariance inOdoPose;
            asn1SccTransformWithCovariance outLidarPose;

    };
}

#endif //  LIDARMAPBASEDLOCALIZATION_INTERFACE_HPP

/** @} */
