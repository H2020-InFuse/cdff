/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group xml;

//delimiters "$", "$"


RootXml(arrsFiles) ::= <<
<?xml version="1.0" encoding="utf-8"?>
<ASN1AST>
    $arrsFiles;separator="\n"$
</ASN1AST>
>>



FileXml(sFileName, arrsModules) ::= <<
<Asn1File FileName="$sFileName$">
    $arrsModules;separator="\n"$
</Asn1File>
>>

ModuleXml(sName, sCName, arrsImportedModules, arrsExpTypes, arrsExpVars, arrsTases, arrsVases) ::=<<
<Asn1Module ID="$sName$">
<ExportedTypes>
    $arrsExpTypes:{x|<ExportedType Name="$x$" />};separator="\n"$ 
</ExportedTypes>
<ExportedVariables>
    $arrsExpVars:{x|<ExportedVariable Name="$x$" />};separator="\n"$ 
</ExportedVariables>
<ImportedModules>
    $arrsImportedModules;separator="\n"$
</ImportedModules>
<TypeAssignments>
    $arrsTases;separator="\n"$
</TypeAssignments>
<VariablesAssignments>
    $arrsVases;separator="\n"$
</VariablesAssignments>
</Asn1Module>
>>

ImportedMod(sName, sCName, arrsTypes, arrsVars) ::= <<
<ImportedModule ID="$sName$">
    <ImportedTypes>
        $arrsTypes:{t|<ImportedType Name="$t$" />};separator="\n"$
    </ImportedTypes>
    <ImportedVariables>
        $arrsVars:{t|<ImportedVariable Name="$t$" />};separator="\n"$
    </ImportedVariables>
</ImportedModule>
>>

TasXml(sName, nLine, nPos, sType, sCName, sAssigOp, sContract) ::= <<
<TypeAssignment Name="$sName$" Line="$nLine$" CharPositionInLine="$nPos$">
    $sType$
</TypeAssignment>
>>

VasXml(sName, nLine, nPos, sType, sValue, sCName) ::= <<
<VariableAssignment Name="$sName$" Line="$nLine$" CharPositionInLine="$nPos$">
    $sType$
    <Value>$sValue$</Value>
</VariableAssignment>
>>

TypeGeneric(nLine, nPos, sSubType) ::= <<
<Type Line="$nLine$" CharPositionInLine="$nPos$">
    $sSubType$
</Type>
>>


MinMaxType(sName, sMin, sMax, bFixedSize) ::= <<
<$sName$ Min="$sMin$" Max="$sMax$"/>
>>

MinMaxType2(sName, sMin, sMax, bFixedSize) ::= <<
<$sName$ Min="$sMin$" Max="$sMax$">
</$sName$>
>>


BooleanType () ::= "<BooleanType />"

NullType () ::= "<NullType />"
IntegerType () ::= "IntegerType"

RealType () ::= "RealType"

BitStringType () ::= "BitStringType"

OctetStringType () ::= "OctetStringType"

IA5StringType () ::= "IA5StringType"

NumericStringType () ::= "NumericStringType"

AssigOpNormalType () ::= "="
AssigOpSpecialType () ::= "="



EnumItem (sName, sCName, nVal, nLine, nPos, sCID) ::= <<
<EnumValue StringValue="$sName$" IntValue="$nVal$" Line="$nLine$" CharPositionInLine="$nPos$" EnumID ="$sCID$" />
>>

EnumType(arrsItems) ::= <<
<EnumeratedType Extensible="False" ValuesAutoCalculated="False">
    <EnumValues>
        $arrsItems;separator="\n"$
    </EnumValues>
</EnumeratedType>
>>


ChoiceChild(sName, sCName, nLine, nPos, sChildContent, sNamePresent ) ::= <<
<ChoiceChild VarName="$sName$" Line="$nLine$" CharPositionInLine="$nPos$" EnumID ="$sNamePresent$">
    $sChildContent$
</ChoiceChild>
>>

ChoiceType(arrsChildren) ::= <<
<ChoiceType>
    $arrsChildren;separator="\n"$
</ChoiceType>
>>


SequenceChild(sName, sCName, bOptional, sDefVal, nLine, nPos, sChildContent ) ::= <<
<SequenceOrSetChild VarName="$sName$" Optional="$bOptional$"$if(sDefVal)$ DefaultValue="$sDefVal$"$endif$ Line="$nLine$" CharPositionInLine="$nPos$">
    $sChildContent$
</SequenceOrSetChild>
>>

SequenceType(arrsChildren) ::= <<
<SequenceType>
    $arrsChildren;separator="\n"$
</SequenceType>
>>


SequenceOfType(sMin, sMax, sChild) ::= <<
<SequenceOfType Min="$sMin$" Max="$sMax$">
    $sChild$
</SequenceOfType>
>>

RefTypeMinMax(sMin, sMax, sName, sModName, sCName, sCModName) ::= <<
<ReferenceType ReferencedTypeName="$sName$" Min="$sMin$" Max="$sMax$"$if(sModName)$ ReferencedModName="$sModName$"$endif$/>
>>

RefType(sName, sModName, sCName, sCModName) ::= <<
<ReferenceType ReferencedTypeName="$sName$"$if(sModName)$ ReferencedModName="$sModName$"$endif$/>
>>

/* Possible additional information generated after the type itself */
Contract(sTypePattern, sExpr) ::= ""
TypePatternCommonTypes() ::= ""
TypePatternSequence(sName, sCName, arrsChildren) ::= ""
SequencePatternChild(sName, sCName) ::= ""
ContractExprMinMax(sPattern, sMin, sMax, bFixedSize) ::= ""
ContractExprSize(sPattern, sMin, sMax, bFixedSize) ::= ""
ContractExprSequence(arrsChildren) ::= ""
/* Print Values (not implemented yet for python) */
Print_IntegerValue(nVal) ::= "$nVal$"    
Print_RealValue(dVal) ::= "$dVal$"       
Print_StringValue(v) ::= "\"$v$\""     
Print_TrueValue() ::= "true"
Print_FalseValue() ::= "false"
Print_BitStringValue(v) ::= "$v$"  
Print_OctetStringValue(arruOctets) ::= "'$arruOctets:{b|$b;format=\"X2\"$}$'H"
Print_RefValue(sName) ::= "$sName$"        
Print_SeqOfValue(arrsValues) ::= "{$arrsValues: {ch|$ch$}; separator=\", \"$}"
Print_SeqValue_Child(sName, sChildValue) ::= "$sName$ $sChildValue$"
Print_SeqValue(arrsValues) ::= "{$arrsValues: {ch|$ch$}; separator=\", \"$}"        
Print_ChValue(sAltName,sAltValue) ::= "$sAltName$:$sAltValue$"         
Print_NullValue() ::= "NULL"       
