/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group asn1;

PrintAsn1File(arrsModules) ::= <<
<arrsModules: {mod| <mod>}; separator="\n">
>>


PrintModule(sName, arrsTas, arrsVas, sExports, arrsImportsFromModule) ::= <<
<sName> DEFINITIONS AUTOMATIC TAGS ::= BEGIN

    EXPORTS
        <sExports>
    ;
<if(arrsImportsFromModule)>
    IMPORTS
        <arrsImportsFromModule; separator="\n\n">
    ;
<endif>

    
    <arrsTas: {tas|<tas>}; separator="\n">

    <arrsVas: {vas|<vas>}; separator="\n">

END
>>


PrintModuleImportFromModule(arrsImports, sModName) ::= <<
<arrsImports; separator = ", "> FROM <sModName>
>>

PrintTypeAssigment(sName, sType) ::= "<sName> ::= <sType>"

PrintValueAssigment(sName, sType, sValue) ::= "<sName> <sType> ::= <sValue>"


PrintType(sTypeSpecific) ::= "<sTypeSpecific>"


Print_Integer(arrsConstraints) ::= "INTEGER <arrsConstraints>"
Print_Real(arrsConstraints) ::= "REAL <arrsConstraints>"
Print_IA5String(arrsConstraints) ::= "IA5String <arrsConstraints>"
Print_NumericString(arrsConstraints) ::= "NumericString <arrsConstraints>"
Print_OctetString(arrsConstraints) ::= "OCTET STRING <arrsConstraints>"
Print_NullType(arrsConstraints) ::= "NULL <arrsConstraints>"
Print_BitString(arrsConstraints) ::= "BIT STRING <arrsConstraints>"
Print_Boolean(arrsConstraints) ::= "BOOLEAN <arrsConstraints>"

Print_Enumerated_child(sName, bHasValue, sValue) ::= "<sName><if(bHasValue)>(<sValue>)<endif>"

Print_Enumerated(arrsItems, arrsConstraints) ::= <<
ENUMERATED {
    <arrsItems: {it|<it>}; separator=",\n">
} <arrsConstraints>
>>

Print_SequenceOf(sChild, arrsConstraints) ::= "SEQUENCE <arrsConstraints> OF <sChild>"


Print_Sequence_child(sName, sChildType, bIsOptionalOrDefault, bHasDefValue, sDefValue) ::= <<
<sName; format="-15"> <sChildType> <if(bIsOptionalOrDefault)><if(bHasDefValue)>DEFAULT <sDefValue><else>OPTIONAL<endif><endif>
>>

Print_Sequence(arrsChildren, arrsConstraints) ::= <<
SEQUENCE {
    <arrsChildren: {ch|<ch>}; separator=",\n">
} <arrsConstraints>
>>


Print_Choice_child(sName, sChildType) ::= "<sName; format=\"-15\"> <sChildType>"

Print_Choice(arrsChildren, arrsConstraints) ::= <<
CHOICE {
    <arrsChildren: {ch|<ch>}; separator=",\n">
} <arrsConstraints>
>>

Print_ReferenceType1(sName, arrsConstraints) ::= "<sName><arrsConstraints>"
Print_ReferenceType2(sModName, sName, arrsConstraints) ::= "<sModName>.<sName><arrsConstraints>"

/* Print Values */

Print_IntegerValue(nVal) ::= "<nVal>"    
Print_RealValue(dVal) ::= "<dVal>"       
Print_StringValue(v) ::= "\"<v>\""     
Print_BooleanValue(bVal) ::= "<bVal>"    
Print_BitStringValue(v) ::= "<v>"  
Print_OctetStringValue(arruOctets) ::= "'<arruOctets:{b|<b;format=\"X2\">}>'H"
Print_RefValue(sName) ::= "<sName>"        
Print_SeqOfValue(arrsValues) ::= "{<arrsValues: {ch|<ch>}; separator=\", \">}"
Print_SeqValue_Child(sName, sChildValue) ::= "<sName> <sChildValue>"
Print_SeqValue(arrsValues) ::= "{<arrsValues: {ch|<ch>}; separator=\", \">}"        
Print_ChValue(sAltName,sAltValue) ::= "<sAltName>:<sAltValue>"         
Print_NullValue() ::= "NULL"       


/* Print Constraints */

Print_SingleValueContraint(v) ::= "(<v>)"       
Print_RangeContraint(v1,v2,bMin, bMax) ::= "(<v1><if(!bMin)>\<<endif> .. <if(!bMax)>\<<endif><v2>)"
Print_RangeContraint_val_MAX(v, bMin) ::= "(<v><if(!bMin)>\<<endif> .. MAX)"
Print_RangeContraint_MIN_val(v, bMax) ::= "(MIN .. <if(!bMax)>\<<endif><v>)"
Print_RangeContraint_MIN_MAX() ::= "(MIN .. MAX)"
Print_TypeInclusionConstraint(sRefName) ::= "(<sRefName>)"    
Print_SizeContraint(sInnerConstraint) ::= "(SIZE<sInnerConstraint>)"              
Print_AlphabetContraint(sInnerConstraint) ::= "(FROM<sInnerConstraint>)"          
Print_UnionConstraint(sInnerConstraint1, sInnerConstraint2) ::= "(<sInnerConstraint1> | <sInnerConstraint2>)"            
Print_IntersectionConstraint(sInnerConstraint1, sInnerConstraint2) ::= "(<sInnerConstraint1> ^ <sInnerConstraint2>)"     
Print_AllExceptConstraint(sInnerConstraint) ::= "(ALL EXCEPT <sInnerConstraint>)"        
Print_ExceptConstraint(sInnerConstraint1,sInnerConstraint2) ::= "(<sInnerConstraint1> EXCEPT <sInnerConstraint2>)"           
Print_RootConstraint(sInnerConstraint) ::= "(<sInnerConstraint>,...)"             
Print_RootConstraint2(sInnerConstraint1, sInnerConstraint2) ::= "(<sInnerConstraint1>,...,<sInnerConstraint2>)"            
Print_WithComponentConstraint(sInnerConstraint) ::= "(WITH COMPONENT<sInnerConstraint>)"    
Print_WithComponentsConstraint_child(sName, sContraint, sPresMark) ::= "<sName> <sContraint> <sPresMark>"
Print_WithComponentsConstraint(arrsInnerConstraints) ::= "(WITH COMPONENTS{<arrsInnerConstraints: {ch|<ch>}; separator=\",\n \">})"   









