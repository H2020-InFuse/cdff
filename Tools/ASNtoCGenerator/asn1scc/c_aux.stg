/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group ch ;

PrintAutomaticTestCasesHeaderFile(sFileNameWithNoExtUpperCase, sFileNameNoExt, arrsTypeAssignments) ::= <<
#ifndef GENERATED_ASN1SCC_<sFileNameWithNoExtUpperCase>_H
#define GENERATED_ASN1SCC_<sFileNameWithNoExtUpperCase>_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "<sFileNameNoExt>.h"

#ifdef  __cplusplus
extern "C" {
#endif


<arrsTypeAssignments:{tas|<tas>}; separator="\n\n">



#ifdef  __cplusplus
}
#endif

#endif

>>


PrintAutomaticTestCasesSourceFile(sHeaderFileName, arrsAdditionalDecl, arrsTypeAssignments) ::= <<
/*
Code automatically generated by asn1scc tool
*/

#include \<string.h>
#include \<math.h>
#include \<limits.h>
#include "asn1crt.h"
#include "<sHeaderFileName>.h"

<arrsAdditionalDecl; separator="\n">

<arrsTypeAssignments:{tas|<tas>}; separator="\n">

>>




PrintTypeAssignment_header(sTasName, sStar, sEnc) ::= <<
flag <sTasName>_<sEnc>enc_dec(const <sTasName><sStar> pVal, int* pErrCode);
>>

/* Encode Decode start*/

ACN_UpdateParamDecl(sTasName, sStar, sParamType, sParamName, sStarParm) ::= <<
flag <sTasName>_ACN_Encode_update_<sParamName>(const <sTasName><sStar> pVal, <sParamType><sStarParm> <sParamName>);
>>

Codec_UpdateDecInParam(sTasName, sParamName) ::= <<
ret = <sTasName>_ACN_Encode_update_<sParamName>(pVal, &dec_<sParamName>);
*pErrCode = ret ? 0 : 1;
>>



Codec_Encode(sTasName, sEnc, arrsEncInDecOutParamsNames) ::= <<
// Encode value
ret = <sTasName>_<sEnc>Encode(pVal, &bitStrm, pErrCode, TRUE<if(arrsEncInDecOutParamsNames)>, <arrsEncInDecOutParamsNames:{p| enc_<p>}; separator=", "><endif>);
*pErrCode = ret ? 0 : 1;
>>

Codec_Decode(sTasName, sEnc, sAmber, arrsDecInParamsNames, arrsEncInDecOutParamsNames) ::= <<
BitStream_AttachBuffer(&bitStrm, encBuff, <sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING);
// Decode value
ret = <sTasName>_<sEnc>Decode(<sAmber>decodedPDU, &bitStrm, pErrCode<if(arrsDecInParamsNames)>, <arrsDecInParamsNames:{p| dec_<p>}; separator=", "><endif><if(arrsEncInDecOutParamsNames)>, <arrsEncInDecOutParamsNames:{p| &dec_<p>}; separator=", "><endif>);
*pErrCode = ret ? 0 : 2;
>>

Codec_Decode_XER(sTasName, sEnc, sAmber, arrsDecInParamsNames, arrsEncInDecOutParamsNames) ::= <<
ByteStream_AttachBuffer(&bitStrm, encBuff, <sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING);
// Decode value
ret = <sTasName>_<sEnc>Decode(<sAmber>decodedPDU, &bitStrm, pErrCode<if(arrsDecInParamsNames)>, <arrsDecInParamsNames:{p| dec_<p>}; separator=", "><endif><if(arrsEncInDecOutParamsNames)>, <arrsEncInDecOutParamsNames:{p| &dec_<p>}; separator=", "><endif>);
*pErrCode = ret ? 0 : 2;
>>

Codec_validate_output(sTasName, sAmber) ::= <<
// validate decoded data
ret = <sTasName>_IsConstraintValid(<sAmber>decodedPDU, pErrCode);
*pErrCode = ret ? 0 : 3;
>>

Codec_compare_input_with_output(sTasName, sAmber, arrsEncInDecOutParamsNames) ::= <<
ret = <sTasName>_Equal(pVal, <sAmber>decodedPDU)<if(arrsEncInDecOutParamsNames)> && <arrsEncInDecOutParamsNames:{p| (enc_<p>==dec_<p>)}; separator=" && "><endif>;
*pErrCode = ret ? 0 : 4;
>>


JoinItems(sPart, sNestedPart) ::= <<
<sPart>
<if(sNestedPart)>
if (ret) {
    <sNestedPart>
}
<endif>
>>


Codec_declare_EncInDecOut_variable(sPrmName, sType, sPrmValue) ::= <<
<sType> enc_<sPrmName> = <sPrmValue>;
<sType> dec_<sPrmName>;
>>

Codec_declare_DecIn_variable(sPrmName, sType) ::= "<sType> dec_<sPrmName>;"


PrintCodec_body(sTasName, sStar, sEnc, arrsEncInDecOutParamsLocalVars, arrsDecInParamLocalVars, sNestedStatements) ::= <<
flag <sTasName>_<sEnc>enc_dec(const <sTasName><sStar> pVal, int* pErrCode)
{
    static <sTasName> decodedPDU;
    static byte encBuff[<sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING + 1]; /* +1 for zerosized types */
    BitStream bitStrm;
    flag ret = TRUE;
    <arrsEncInDecOutParamsLocalVars; separator="\n">
    <arrsDecInParamLocalVars; separator="\n">

    BitStream_Init(&bitStrm, encBuff, <sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING);
    <sNestedStatements>
    return ret;
}
>>

PrintCodec_body_XER(sTasName, sStar, sEnc, arrsEncInDecOutParamsLocalVars, arrsDecInParamLocalVars, sNestedStatements) ::= <<
flag <sTasName>_<sEnc>enc_dec(const <sTasName><sStar> pVal, int* pErrCode)
{
    static <sTasName> decodedPDU;
    static byte encBuff[<sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING + 1]; /* +1 for zerosized types */
    ByteStream bitStrm;
    flag ret = TRUE;
    <arrsEncInDecOutParamsLocalVars; separator="\n">
    <arrsDecInParamLocalVars; separator="\n">

    ByteStream_Init(&bitStrm, encBuff, <sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING);
    <sNestedStatements>
    return ret;
}
>>





/* Encode Decode End*/


PrintMain(sTestSuiteFilename) ::= <<
#include \<stdio.h>

#include "<sTestSuiteFilename>.h"

static void printf_tests_failed(int testCount, int failedCount)
{
    printf("%d out of %d failed.\n", failedCount, testCount);
}

static void printf_tests_passed(int testCount)
{
    printf("All test cases (%d) run successfully.\n", testCount);
}

static void printf_null()
{
}

static void printf_null_char(const char* s)
{
    (void)s;
}

static void printf_message(const char* message)
{
    printf("%s\n", message);
}

int main(int argc, char* argv[])
{
    (void)argc;
    (void)argv;

    TestOutput output = {
               .report_tests_failed = printf_tests_failed,
               .report_all_tests_passed = printf_tests_passed,
               .report_suite_begin = printf_null,
               .report_suite_end = printf_null,
               .report_case_begin = printf_null_char,
               .report_case_end = printf_null,
               .report_failure_begin = printf_null,
               .report_failure_end = printf_null,
               .report_failure_message = printf_message
    };

    return asn1scc_run_generated_testsuite(&output);
}

>>

/*
Code calling a test case
*/
PrintSuite_call_codec(sTasName, sAmber, sEnc, sValue, sValueAsAsn1, sVasName, bStatic, sGenerateDatFile) ::= <<
{
    output->report_case_begin("<sTasName>_<sEnc>enc_dec");

    {
        // dummy statement used for calling init functions
        <if(bStatic)>static <endif><sTasName> tmp0;
        <sTasName>_Initialize(<sAmber>tmp0);
    }
    <if(bStatic)>static <endif><sTasName> tmp =
        <sValue>;
        result = <sTasName>_<sEnc>enc_dec(<sAmber>tmp, &errCode);
        if (!result) {
           output->report_failure_begin();

           switch(errCode)
           {
           case 1:
                output->report_failure_message("Test case <sVasName> failed in encoding.");
                break;
           case 2:
                output->report_failure_message("Test case '<sVasName>' failed in decoding.");
                break;
           case 3:
                output->report_failure_message("Test case '<sVasName>' failed in the validation of the decoded message.");
                break;
           case 4:
                output->report_failure_message("Test case '<sVasName>' failed. Encoded and decoded messages are different.");
                break;
           default:
                output->report_failure_message("Unexpected error code in test case '<sVasName>'.");
           }
           output->report_failure_message("Test Value was <sValueAsAsn1>");
           output->report_failure_message("========================================");
           totalErrors = totalErrors + 1;

           output->report_failure_end();
        }
    <sGenerateDatFile>

    output->report_case_end();
}
>>


PrintSuite_call_codec_generate_dat_file(sTasName, sAmber, sEnc, sStreamName) ::= <<
	if (result) {
		static byte encBuff[<sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING + 1]; /* +1 for zerosized types */
		<sStreamName>Stream bitStrm;
		FILE* fp;

  		<sStreamName>Stream_Init(&bitStrm, encBuff, <sTasName>_REQUIRED_BYTES_FOR_<sEnc>ENCODING);

		result = <sTasName>_<sEnc>Encode(<sAmber>tmp, &bitStrm, &errCode, TRUE);
		fp = fopen("asn1scc_<sEnc>.dat","wb");

		if (fp==NULL) 
		{
			printf("fopen failed !!!\n");
			return 2;
		}

	
		fwrite(encBuff,1,(size_t)<sStreamName>Stream_GetLength(&bitStrm),fp);
		fclose(fp);
	};
>>

PrintMakeFile(arrsFilesNoExt) ::= <<
# The directories containing the source files, separated by ':'
VPATH=.

CC=gcc

# To make "debug" the default configuration if invoked with just "make":
#
# The source files: regardless of where they reside in the source tree,
# VPATH will locate them...
Group0_SRC = $(shell echo *.c)

# Build a Dependency list and an Object list, by replacing the .c
# extension to .d for dependency files, and .o for object files.
Group0_OBJ = $(patsubst %.c, %.o, ${Group0_SRC})

# Your final binary
TARGET=mainprogram

# What include flags to pass to the compiler
INCLUDEFLAGS= -I .

# -Wall -Wextra -pedantic -Wcast-qual -Wformat=2 -Wshadow -Wundef -Wno-unused -Wuninitialized -fdiagnostics-show-option
# Separate compile options per configuration
CFLAGS += -g -Wall -Werror -Wextra -Wuninitialized -Wcast-qual -Wshadow -Wundef -Wno-unused -Wno-type-limits -Wno-unused-parameter -Wuninitialized -fdiagnostics-show-option -D_DEBUG ${INCLUDEFLAGS} -O0 -fprofile-arcs -ftest-coverage
LDFLAGS += -g -ftest-coverage -fprofile-arcs

# A common link flag for all configurations
LDFLAGS +=

all:	${TARGET}

${TARGET}: ${Group0_OBJ}
	@mkdir -p $(dir $@)
	$(CC) -g -o $@ $^ ${LDFLAGS}

%.o: %.c
	@mkdir -p $(dir $@)
	$(CC) -c $(CFLAGS) -o $@ $\<

coverage:
	$(MAKE) && ./$(TARGET) && \
	    gcov <arrsFilesNoExt: {f|<f>.c}; separator=" ">

clean:
	@rm -rf *.o $(TARGET) *.gcda *.gcno *.gcov
>>

PrintTestSuiteHeader() ::= <<
#ifndef GENERATED_ASN1SCC_TESTSUITE_H
#define GENERATED_ASN1SCC_TESTSUITE_H

typedef struct {
    void (*report_tests_failed)(int testsCount, int failedCount);
    void (*report_all_tests_passed)(int testsCount);

    void (*report_suite_begin)();
    void (*report_suite_end)();

    void (*report_case_begin)(const char* caseName);
    void (*report_case_end)();

    void (*report_failure_begin)();
    void (*report_failure_end)();
    void (*report_failure_message)(const char* message);
} TestOutput;

int asn1scc_run_generated_testsuite(TestOutput* output);

#endif // GENERATED_ASN1SCC_TESTSUITE_H

>>

PrintTestSuiteSource(sTestSuiteFilename, arrsIncludedModules, arrsTestFunctions) ::= <<
#include "<sTestSuiteFilename>.h"

#include \<stdio.h>
#include \<string.h>
#include \<math.h>
#include \<float.h>
#include \<limits.h>

#include "asn1crt.h"

<arrsIncludedModules:{inc| #include "<inc>.h"}; separator="\n">

int asn1scc_run_generated_testsuite(TestOutput* output)
{
    int totalErrors = 0;
    flag result;
    int errCode;

    output->report_suite_begin();

    <arrsTestFunctions;separator="\n\n">

    output->report_suite_end();

    if (totalErrors > 0 ) {
        output->report_tests_failed(<arrsTestFunctions.Length>, totalErrors);
        return 1;
    } else {
        output->report_all_tests_passed(<arrsTestFunctions.Length>);
        return 0;
    }
}

>>