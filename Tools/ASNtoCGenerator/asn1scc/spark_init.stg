/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group spark_init;




CHOICE_setters_body_child(sTasName, sName, sType, sNamePresent) ::= <<
FUNCTION <sTasName>_<sName>_get(val:<sTasName>) RETURN <sType>
IS --# hide <sTasName>_<sName>_get;
BEGIN
    RETURN val.<sName>;
END <sTasName>_<sName>_get;

FUNCTION <sTasName>_<sName>_set(itm:<sType>) RETURN <sTasName>
IS --# hide <sTasName>_<sName>_set;
BEGIN
    RETURN <sTasName>'(kind => <sNamePresent>, <sName> => itm);
END <sTasName>_<sName>_set;
>>


CHOICE_setters_body(sTasName, arrsChildren) ::= <<
FUNCTION <sTasName>_kind(val:<sTasName>) RETURN <sTasName>_selection 
IS --# hide <sTasName>_kind;
BEGIN
    return val.kind;
END <sTasName>_kind;

<arrsChildren; separator="\n">


>>



PrintTypeAssignment(sName, sInitBody, bContainsChoice) ::= <<
FUNCTION <sName>_Init return <sName>
IS <if(bContainsChoice)>--#hide <sName>_Init;<endif>
BEGIN
    RETURN <sInitBody>;
END <sName>_Init;
>>

/*
 *****************************************************************************************
               E Q U A L I T Y     F U N C T I O N S
 *****************************************************************************************
 */
PrimitiveEqual(p1,p2) ::= <<
begin
    return <p1> = <p2>;
>>


isEqual_Integer(p1, p2) ::= <<
begin
    return <p1> = <p2>;
>>


isEqual_Real(p1, p2) ::= <<
begin
    return Asn1Real_Equal(<p1>, <p2>);
>>


isEqual_IA5String(p1, p2) ::= <<
begin
    return <p1> = <p2>;
>>


isEqual_NumericString(p1, p2) ::= <<
begin
    return <p1> = <p2>;
>>


isEqual_OctetString(p1, p2, bFixedSize, nFixedSize) ::= <<
<if(!bFixedSize)>
    subtype Slice is Natural range 1 .. <p1>.Length;
begin
    return (<p1>.Length = <p2>.Length and then <p1>.Data(Slice) = <p2>.Data(Slice));
<else>
begin
    return <p1>.Data(<p1>.Data'Range) = <p2>.Data(<p2>.Data'Range);
<endif>	
>>


isEqual_NullType() ::= <<
begin
    return True;
>>


isEqual_BitString(p1,p2,bFixedSize,nFixedSize) ::= <<
<isEqual_OctetString(p1=p1,p2=p2, bFixedSize=bFixedSize, nFixedSize=nFixedSize)>
>>

isEqual_Boolean(p1, p2) ::= <<
begin
    return <p1> = <p2>;
>>


isEqual_Enumerated(p1, p2) ::= <<
begin
    return <p1> = <p2>;
>>


isEqual_SequenceOf(p1,p2, i, bIsFixedSize, nFixedSize, sInnerType, sInnerTypeName) ::= <<
<if(!bIsFixedSize)>
    subtype Slice is Natural range 1 .. <p1>.Length;
begin
    return (<p1>.Length = <p2>.Length and then (for all I in Slice => <sInnerTypeName>_Equal(<p1>.Data(I), <p2>.Data(I))));
<else>
begin
    return (for all I in <p1>.Data'Range => <sInnerTypeName>_Equal(<p1>.Data(I), <p2>.Data(I)));
<endif>	
>>


isEqual_Choice_Child(p1, p2, sCid, sAsn1Id, sInnerType, sTasName, sInnerTypeName) ::= <<
(if <sTasName>_kind(<p1>) = <sCid> then
 <sInnerTypeName>_Equal(<sTasName>_<sAsn1Id>_get(<p1>), <sTasName>_<sAsn1Id>_get(<p2>)) else False)
>>


isEqual_Choice(p1,p2, arrsChildren, sTasName) ::= <<
begin
    return <sTasName>_kind(<p1>) = <sTasName>_kind(<p2>) and then
    (<arrsChildren; separator=" or \n">);

>>


isEqual_Sequence_Child(p1, p2, bIsOptional, sChName, sInnerTypeName) ::= <<
<if(bIsOptional)>
(if <p1>.Exist.<sChName> = 1 then (<p2>.Exist.<sChName> = 1 and <sInnerTypeName>_Equal(<p1>.<sChName>, <p2>.<sChName>)) else (<p2>.Exist.<sChName> = 0))
<else>
<sInnerTypeName>_Equal(<p1>.<sChName>, <p2>.<sChName>)
<endif>
>>


isEqual_Sequence(p1, p2, arrsChildren) ::= <<
begin
    return <if(arrsChildren)><arrsChildren; separator=" and "><else>true<endif>;
>>


isEqual_ReferenceType(sPtr1, sPtr2, sName) ::= <<
begin
    return <sName>_Equal(<sPtr1>, <sPtr2>);
>>


PrintTypeAssignment_Equal(sName, sBody, arrsLocalVariables) ::= <<
function <sName>_Equal(val1, val2: in <sName>) return Boolean
is
<sBody>
end <sName>_Equal;
>>
