/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group icd_uper;

//delimiters "$", "$"

Infinity() ::= "&#8734"

NewLine() ::= "<br/>"

Orange() ::= "#FF8f00"
Blue() ::= "#379CEE"

ItemNumber(nIndex) ::= "Item #$nIndex$"


Integer()       ::= "INTEGER"
BitString()     ::= "BIT-STRING"
OctetString()   ::= "OCTET-STRING"
Boolean()       ::= "BOOLEAN"
Choice()        ::= "CHOICE"
Enumerated()    ::= "ENUMERATED"
IA5String()     ::= "IA5String"
NumericString() ::= "NumericString"
NullType()      ::= "NULL"
Real()          ::= "REAL"
Sequence()      ::= "SEQUENCE"
SequenceOf()    ::= "SEQUENCE-OF"


// HTML formatting for the input ASN.1 grammar (new in version 3.2.x)

// Lower/greater than symbols (< and >) must be replaced with HTML code
LeftDiple() ::= "&lt;"
RightDiple() ::= "&gt;"

BlueTas(sBlueTasC,sTasName) ::= <<
<a name="ASN1_$sBlueTasC$">$sTasName$</a>
>>

Asn1Token(sKeyword) ::= <<
<b><font color="#5F9EA0">$sKeyword$</font></b>
>>

StringLiteral(sStringLiteral) ::= <<
<font color="#A31515">$sStringLiteral$</font>
>>

TasName(sTasName, sTasNameC) ::= <<
<a name="ASN1_$sTasNameC$"></a><a href="#ICD_$sTasNameC$"><font color="#B8860B"><b>$sTasName$</b></font></a>
>>

TasName2(sTasName, sTasNameC) ::= <<
<a href="#ASN1_$sTasNameC$"><font color="#000000">$sTasName$</font></a>
>>

Comment(sComment) ::= <<
<font color="#008000"><i>$sComment$</i></font>
>>

// End HTML formatting for the ACN grammar


RealSizeExplained() ::= <<
<a href="#REAL_SIZE_EXPLAINED123"><span style="vertical-align: super">why?</span></a>
>>

IntSizeExplained() ::= <<
<a href="#INT_SIZE_EXPLAINED123"><span style="vertical-align: super">why?</span></a>
>>

ArraySizeExplained() ::= <<
<a href="#ARRAYS_SIZE_EXPLAINED123"><span style="vertical-align: super">why?</span></a>
>>

ZeroSizeExplained() ::= <<
<a href="#ZERO_BITS_EXPLAINED123"><span style="vertical-align: super">why?</span></a>
>>


EmitEnumItem(sName, nValue) ::= <<
<li><font  color="#5F9EA0" >$sName$</font>($nValue$)</li>
>>

EmitEnumItemWithComment(sName, nValue, sComment) ::= <<
<li><font  color="#5F9EA0" >$sName$</font>($nValue$) -- $sComment$</li>
>>

EmitEnumInternalContents(arrsItems) ::= <<
Enumeration's values:<br/>
<ul type="square">
$arrsItems;separator="\n"$
</ul>
>>

// applicable to Integers, booleans, reals
EmitPrimitiveType(sColor, sTasName, sTasNameC, sAsnKindName, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, sAsn1Constraints, sMinBits, sMaxBits, arrsComments) ::= <<
<a name="ICD_$sTasNameC$"></a> 
<table border="0" width="100%" >
<tbody>

<tr  bgcolor="$sColor$">
<td height="35" colspan="2"  >
<font face="Verdana" color="#FFFFFF" size="4">$sTasName$</font><font face="Verdana" color="#FFFFFF" size="2">($sAsnKindName$) </font>
<font face="Verdana" color="#FFFFFF" size="2"><a href="#ASN1_$sTasNameC$">ASN.1</a></font>
</td>

<td height="35" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">min = $sMinBytes$ bytes</font>
</td>

<td height="35" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">max = $sMaxBytes$ bytes$sMaxBitsExplained$</font>
</td>
</tr>

$if(sCommentLine)$
<tr class="CommentRow">
<td class="comment2" colspan="4">$sCommentLine$</td>
</tr>

$endif$

<tr class="headerRow">
<td class="hrconstraint2" colspan="2">Constraints</td>
<td class="hrMin2">Min Length (bits)</td>
<td class="hrMax2">Max Length (bits)</td>
</tr>

<tr class="OddRow">
    <td class="constraint" colspan="2">$sAsn1Constraints$</td>
    <td class="min" >$sMinBits$</td>
    <td class="max" >$sMaxBits$$sMaxBitsExplained$</td>
</tr>

</tbody>
</table>
>>



EmitSequence(sColor, sTasName, sTasNameC, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsChildren, arrsComments) ::= <<
<a name="ICD_$sTasNameC$"></a> 
<table border="0" width="100%" >
<tbody>

<tr  bgcolor="$sColor$">
<td height="35" colspan="4"  >
<font face="Verdana" color="#FFFFFF" size="4">$sTasName$</font><font face="Verdana" color="#FFFFFF" size="2">(SEQUENCE) </font>
<font face="Verdana" color="#FFFFFF" size="2"><a href="#ASN1_$sTasNameC$">ASN.1</a></font>
</td>

<td height="35" colspan="2" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">min = $sMinBytes$ bytes</font>
</td>

<td height="35" colspan="2" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">max = $sMaxBytes$ bytes$sMaxBitsExplained$</font>
</td>
</tr>

$if(sCommentLine)$
<tr class="CommentRow">
<td class="comment2" colspan="4">$sCommentLine$</td>
</tr>
$endif$

<tr class="headerRow">
<td class="hrNo">No</td>
<td class="hrField">Field</td>
<td class="hrComment">Comment</td>
<td class="hrOptional">Optional</td>
<td class="hrType">Type</td>
<td class="hrconstraint">Constraint</td>
<td class="hrMin">Min Length (bits)</td>
<td class="hrMax">Max Length (bits)</td>
</tr>

$arrsChildren;separator="\n"$



</tbody>
</table>
>>



EmmitSeqChild_RefType(sRefName, sRefNameC) ::= <<
<a href="#ICD_$sRefNameC$">$sRefName$</a>
>>


OddRow() ::= "OddRow"
EvenRow() ::= "EvenRow"

EmmitSequenceChild(sCssClass, nIndex, sName, sComment, sOptionality, sType, sConstraint, sMin, sMax) ::= <<
<tr class="$sCssClass$">
<td class="no">$nIndex$</td>
<td class="field">$sName$</td>
<td class="comment">$sComment$</td>
<td class="optional">$sOptionality$</td>
<td class="type">$sType$</td>
<td class="constraint">$sConstraint$</td>
<td class="min">$sMin$</td>
<td class="max">$sMax$</td>
</tr>
>>


EmmitSequencePreambleSingleComment(nIndex, sOptChildName) ::= <<
<li>bit$nIndex$ == 1 &#8658 <font  color="#5F9EA0" >$sOptChildName$</font> is present</li>
>>

EmmitSequencePreambleComment(arrsOptChildren) ::= <<
Special field used by PER to indicate the presence/absence of optional and default fields.
<br/>
<ul type="square">
$arrsOptChildren;separator="\n"$
</ul>
>>



/* *** CHOICE ****/
EmitChoice(sColor, sTasName, sTasNameC, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsChildren, arrsComments) ::= <<
<a name="ICD_$sTasNameC$"></a> 
<table border="0" width="100%" >
<tbody>

<tr  bgcolor="$sColor$">
<td height="35" colspan="4"  >
<font face="Verdana" color="#FFFFFF" size="4">$sTasName$</font><font face="Verdana" color="#FFFFFF" size="2">(CHOICE) </font>
<font face="Verdana" color="#FFFFFF" size="2"><a href="#ASN1_$sTasNameC$">ASN.1</a></font>
</td>

<td height="35" colspan="2" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">min = $sMinBytes$ bytes</font>
</td>

<td height="35" colspan="2" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">max = $sMaxBytes$ bytes$sMaxBitsExplained$</font>
</td>
</tr>

$if(sCommentLine)$
<tr class="CommentRow">
<td class="comment2" colspan="4">$sCommentLine$</td>
</tr>
$endif$

<tr class="headerRow">
<td class="hrNo">No</td>
<td class="hrField">Field</td>
<td class="hrComment">Comment</td>
<td class="hrType">Type</td>
<td class="hrconstraint">Constraint</td>
<td class="hrMin">Min Length (bits)</td>
<td class="hrMax">Max Length (bits)</td>
</tr>

$arrsChildren;separator="\n"$

</tbody>
</table>
>>


EmmitChoiceChild(sCssClass, nIndex, sName, sComment,  sType, sConstraint, sMin, sMax) ::= <<
<tr class="$sCssClass$">
<td class="no">$nIndex$</td>
<td class="field">$sName$</td>
<td class="comment">$sComment$</td>
<td class="type">$sType$</td>
<td class="constraint">$sConstraint$</td>
<td class="min">$sMin$</td>
<td class="max">$sMax$</td>
</tr>
>>

EmmitChoiceIndexSingleComment(nIndex, sChildName) ::= <<
<li>$nIndex$  &#8658 <font  color="#5F9EA0" >$sChildName$</font></li>
>>

EmmitChoiceIndexComment(arrsOptChildren) ::= <<
Special field used by PER to indicate which choice alternative is present.
<br/>
<ul type="square">
$arrsOptChildren;separator="\n"$
</ul>
>>


/* *********** CHOICE END ********** */
/* *********** SEQUENCE OF, OCTET STRING etc ********** */
EmitSizeable(sColor, sTasName, sTasNameC, sKind, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsRows, arrsComments) ::= <<
<a name="ICD_$sTasNameC$"></a> 
<table border="0" width="100%" >
<tbody>

<tr  bgcolor="$sColor$">
<td height="35" colspan="4"  >
<font face="Verdana" color="#FFFFFF" size="4">$sTasName$</font><font face="Verdana" color="#FFFFFF" size="2">($sKind$) </font>
<font face="Verdana" color="#FFFFFF" size="2"><a href="#ASN1_$sTasNameC$">ASN.1</a></font>
</td>

<td height="35" colspan="2" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">min = $sMinBytes$ bytes</font>
</td>

<td height="35" colspan="2" align="center">
    <font face="Verdana" color="#FFFFFF" size="2">max = $sMaxBytes$ bytes$sMaxBitsExplained$</font>
</td>
</tr>

$if(sCommentLine)$
<tr class="CommentRow">
<td class="comment2" colspan="8">$sCommentLine$</td>
</tr>
$endif$

<tr class="headerRow">
<td class="hrNo">No</td>
<td class="hrField">Field</td>
<td class="hrComment">Comment</td>
<td class="hrType">Type</td>
<td class="hrconstraint">Constraint</td>
<td class="hrMin">Min Length (bits)</td>
<td class="hrMax">Max Length (bits)</td>
</tr>

$arrsRows;separator="\n"$

</tbody>
</table>
>>

EmitRowWith3Dots() ::= <<
<tr class="CommentRow">
<td class="threeDots" colspan="7"> <p>. . .</p> </td>
</tr>
>>




/* *********** end of SEQUENCE OF, OCTET STRING etc ********** */




EmmitTass(sTypeContent) ::= <<
$sTypeContent$
&nbsp;<br/>
>>


EmmitModule(sModName, arrsComments, arrsTases) ::= <<
<div style="width: 100%">
<h2 >Module : $sModName$</h2>
<font face="Courier" color="DimGray"><pre>
$arrsComments;separator="\n"$
</pre></font>
$arrsTases;separator="\n"$
</div>
>>


EmmitFile(sAsnFileName, arrsModules) ::= <<
<div style="width: 100%">
<h1 >Asn1 file : $sAsnFileName$</h1>
    $arrsModules;separator="\n"$
</div>
>>

EmmitFilePart2(sFileName, sAsn1Content) ::= <<
<div style="width: 100%">
<h1 >File : $sFileName$</h1>
<div style="width: 100%; white-space:pre; font-family:Courier New; font-size:small">
$sAsn1Content$
</div>
</div>
>>

RootHtml(arrsFiles1, arrsFiles2, bIntegerSizeMustBeExplained, bRealSizeMustBeExplained, bLengthSizeMustBeExplained, bWithComponentMustBeExplained, bZeroBitsMustBeExplained) ::= <<
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>ICD</title>
    <style type="text/css"> 
.headerRow
{
    background-color: #BBBBBB;
}

.hrNo
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width: 3%;
}
.hrField
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:15%;
}

.hrComment
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
}

.hrType
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:10%;
}

.hrconstraint
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:10%;
}

.hrconstraint2
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
}

.hrOptional
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:10%;
}
.hrMin
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:10%;
}
.hrMax
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:10%;
}

.hrMin2
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:20%;
}
.hrMax2
{
    text-align: center;
    font-family: Verdana;
    color: white;
    font-size: 10pt;
    width:20%;
}

.CommentRow
{
    background-color: #e9e9e9;
    height:25px;
}

.OddRow
{
    background-color: #e9e9e9;
    height:25px;
}

.EvenRow
{
    background-color: #DBDBDB;
    height:25px;
}


.no
{
    text-align:  center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
/*    width:30pt;*/
}

.field
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
/*    width:15%;*/
}

.field2
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
}

.comment
{
    color: black;
/*    width:25%;*/
    font-family: Verdana;
    font-size: 9pt;
    text-align:left;
}

.comment2
{
    color: black;
    font-family: Verdana;
    font-size: 9pt;
    text-align:left;
}

.threeDots
{
    color: black;
    font-family: Verdana;
    font-size: 9pt;
    text-align:center;
}

.type
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
/*    width:10%;*/
}

.type2
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
}

.constraint
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
}

.optional
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
/*    width:10%;*/
}
.min
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
/*    width:70pt;*/
}
.max
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
/*    width:70pt;*/
}

.min2
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
}
.max2
{
    text-align: center;
    font-family: Verdana;
    color: black;
    font-size: 9pt;
}


h1
{
    font-family: Verdana, Tahoma;
    color: #033a7a;
    font-size: 14pt;
}

h2
{
    font-family: Verdana, Tahoma;
    color: #033a7a;
    font-size: 12pt;
}
 </style>
</head>
<body>
<em>The following tables describe the binary encodings of the data model using the ASN.1 Unaligned Packed Encoding Rules <a href="http://www.itu.int/ITU-T/studygroups/com17/languages/X.691-0207.pdf">(PER)</a> - ITU-T Rec. X.691 (2002) | ISO/IEC 8825-2:2002 ASN.1 encoding rules.
</em><br/><br/>
  $arrsFiles1;separator="\n"$
  <hr />
$if(bIntegerSizeMustBeExplained)$
    <a name="INT_SIZE_EXPLAINED123"></a>
    <em>Unconstraint integer's size explained</em><br/>
    In unaligned PER, unconstraint integers are encoded into the minimum number of octets (using non negative binary integer or 2's-complement binary integer encoding) and a length determinant, containing the number of value octets, is added at the beginning of the encoding. Therefore uPER can support integers of any size, even of infinity value. However, in almost all processors, integers have limited capacity which is usually four or eight octets. Therefore, the reported maximum size in octets for an unconstraint integer is 1 (for the length determinant) plus the word size for the target processor which is specified in the command line by the wordSize argument. In this invocation, wordSize was specified to be 8 octets and therefore the maximum size of the unconstraint integers is 9 octets or 72 bits
    <br/>
    <br/>
$endif$
$if(bRealSizeMustBeExplained)$
    <a name="REAL_SIZE_EXPLAINED123"></a>
    <em>Real's size explained</em><br/>
    In both uPER and aPER, real values are encoded as a pair of integers which represent the mantissa and exponent (real value = mantissa* 2<span style="vertical-align: super">exponent</span>). In particular, a real is encoded into a length determinant field, a header field (always one octet), the exponent field using 2's complement binary integer and the mantissa field. Therefore uPER can support reals with infinity precision since both exponent and mantissa can, theoretically, have infinity length. However, in almost all processors, integers have limited capacity which is usually four or eight octets. Therefore, the reported maximum size in octets for a real is 1 for the length determinant plus 1 for header field plus 3 octets for exponent and finally plus the word size for the target processor which is specified in the command line by the wordSize argument. In this invocation, wordSize was specified to be 8 octets and therefore the maximum size of a real is 13 octets or 104 bits.
    <br/>
    <br/>
$endif$
$if(bLengthSizeMustBeExplained)$
    <a name="ARRAYS_SIZE_EXPLAINED123"></a>
    <em>Length's size explained</em><br/>
    In uPER, the length determinant field, which used in the encoding of sizeable types such as SEQUENCE OFs, SET OFs, BIT STRINGs, OCTET STRINGs and character types, is at most two octets provided that (a) there is a SIZE constraint which limits the length count to a value less than 64K or (b) there is no size constraint, but in the given instance of the sizeable type the number of the elements is less than 16K. In all other cases, the sizeable type is encoded using fragmentation where the length determinant is encoded interstitially with the actual data. In this particular case (i.e. when fragmentation is applicable), the table produced by the autoICD generator does not represent correctly the physical PER encoding.
    <br/>
    <br/>
$endif$
$if(bWithComponentMustBeExplained)$
    <a name="WITH_COMPONENT_EXPLAINED123"></a>
    <em>Constraint ignored in encoding</em><br/>
    The constraint with the yellow color is not PER visible, as it derives from a WITH COMPONENT or WITH COMPONENTS contraint in the parent type, and therefore is ignored in the encoding/decoding.
    <br/>
    <br/>
$endif$
$if(bZeroBitsMustBeExplained)$
    <a name="ZERO_BITS_EXPLAINED123"></a>
    <em>Field with zero size explained</em><br/>
    An integer type that is contraint to a single value (i.e. INTEGER (5) or INTEGER (1..10)(10..20)) requires zero bits when encoded in uPER since the decoder can always determine its value. In other words, a integer field which is contraint to a single value is never transmitted in uPER.
    <br/>
$endif$

  <hr />

  $arrsFiles2;separator="\n"$


</body>
</html>
>>



