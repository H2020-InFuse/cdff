/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group s_validate: spark_spec;


Print_AlphabetCheckFunc_str() ::= "str(I)"

Print_AlphabetCheckFunc(sName, arrsAlphaConBody) ::= <<
FUNCTION <sName>_CharsAreValid(str : in String) return boolean 
--# pre STR'First=1 AND STR'Last>=STR'First AND STR'Last\<=INTEGER'LAST-1;
IS
    ret:BOOLEAN:=true;
    I:INTEGER:=1;
BEGIN
    WHILE I\<=<rtlModuleName()>.getStringSize(str) and ret LOOP
    --# assert I>=1 AND I\<=str'Last;
        ret := ret AND <arrsAlphaConBody; separator=" AND ">;
        I := I + 1;
    END LOOP;
    return ret;
END <sName>_CharsAreValid;
>>

PrintMultipleConstraints(arrsConstraints) ::= "<arrsConstraints; separator=\" AND \">"

callAlphaFunc(sFuncName, p) ::= "<sFuncName>_CharsAreValid(<p>)"

getStringSize(p) ::= "<rtlModuleName()>.getStringSize(<p>)"

getSizeableSize(p) ::= "<p>.Length"

stringContainsChar(sStrVal, p) ::= "<rtlModuleName()>.stringContainsChar(<sStrVal>, <p>)"

PrintReference1(p, sName) ::= "<sName>_IsConstraintValid(<p>)"

PrintReference2(p, sModName,sName) ::= "<sModName>.<sName>_IsConstraintValid(<p>)"

SingleValContraint(p, v) ::= "(<p> = <v>)"

RangeContraint(p, v1, v2, bMin, bMax) ::= "(<v1> \<<if(bMin)>=<endif> <p> AND <p> \<<if(bMax)>=<endif> <v2>)"

RangeContraint_val_MAX(p, v, bMin) ::= "<p> ><if(bMin)>=<endif> <v>"

RangeContraint_MIN_val(p, v, bMax) ::= "<p> \<<if(bMax)>=<endif> <v>"

AND_Constraint(sCon1, sCon2) ::= "(<sCon1> AND <sCon2>)"

OR_Constraint(sCon1, sCon2) ::= "(<sCon1> OR <sCon2>)"

AllExceptConstraint(sCon)  ::= "(NOT (<sCon>))"

ExceptConstraint(sCon1,sCon2) ::= "(<sCon1> AND NOT (<sCon2>))"


Emit_local_variable_SQF_Index(nI, bHasInitalValue)::="I<nI>:Integer<if(bHasInitalValue)>:=1<endif>;"


EmitTypeAssignment(sName, sTypeBody, arrsAlphaCheckFunctions, arrsLocalVars, sAsn1TypeDefinition) ::= <<
FUNCTION <sName>_IsConstraintValid(val : in <sName>) return <rtlModuleName()>.ASN1_RESULT
IS
    ret : <rtlModuleName()>.ASN1_RESULT;
    <arrsLocalVars; separator="\n"> 
    <arrsAlphaCheckFunctions; separator="\n"> 
BEGIN
<sAsn1TypeDefinition>


    <sTypeBody>
    RETURN ret;
END <sName>_IsConstraintValid;
>>


Emit_type(arrsConstraints, sErrCodeName) ::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => <if(arrsConstraints)><arrsConstraints; separator=" AND "><else>TRUE<endif>, ErrorCode => <sErrCodeName>);
>>

Emit_Reference1(p, sName) ::= "ret := <sName>_IsConstraintValid(<p>);"

Emit_Reference2(p, sModName,sName) ::= "ret := <sModName>.<sName>_IsConstraintValid(<p>);"



Emit_sequence_of_assert(sI, nMax) ::= "<sI> >= 1 AND <sI> \<= <nMax>"

Emit_sequence_of(sI, sPath, nMax, sSizeConstraint, sChildBody, bFixed, arrsAssrtAnts) ::= <<
<sSizeConstraint>
<sI> := 1;
WHILE ret.Success AND <sI>\<=<if(bFixed)><nMax><else><sPath>.Length<endif> LOOP
--# assert <arrsAssrtAnts; separator= " AND ">;
    <sChildBody>
    <sI> := <sI>+1;
END LOOP;
>>

Emit_fixedSize_constraint() ::= "ret := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);"


/* SEQUENCE start*/
Emit_sequence_optional_component(sParentPath, sName, sChildBody) ::=<<
IF <sParentPath>.Exist.<sName>=1 THEN
    <sChildBody>
END IF;
>>

Emit_sequence_check_component_is_always_present_or_absent(sParentPath, sName, nPresOrAbs, sErrCode) ::= <<
ret:= <rtlModuleName()>.ASN1_RESULT'(Success => <sParentPath>.Exist.<sName>=<nPresOrAbs>, ErrorCode => <sErrCode>);
>>

JoinItems(sPart, bCanFail, sNestedPart) ::= <<
<sPart>
<if(sNestedPart)>
<if(bCanFail)>
IF ret.Success THEN
    <sNestedPart>
END IF;
<else>
<sNestedPart>
<endif>
<endif>
>>

/* SEQUENCE end*/


Emit_choice_child(sName, sChildBody, sNamePresent) ::= <<
WHEN <sNamePresent> =>
    <sChildBody>
>>

Emit_choice(sTasName, arrsChildren) ::= <<
CASE <sTasName>_kind(val) IS
    <arrsChildren; separator="\n">
END CASE;
>>