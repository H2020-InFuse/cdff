group icd_uper;

//delimiters "$", "$"

Infinity() ::= <<
\infty

>>

NewLine() ::= <<
\newline

>>

ItemNumber(nIndex) ::= <<
Item $nIndex$
>>

Orange() ::= ""
Blue() ::= ""

Integer()       ::= "INTEGER"
BitString()     ::= "BIT-STRING"
OctetString()   ::= "OCTET-STRING"
Boolean()       ::= "BOOLEAN"
Choice()        ::= "CHOICE"
Enumerated()    ::= "ENUMERATED"
IA5String()     ::= "IA5String"
NumericString() ::= "NumericString"
NullType()      ::= "NULL"
Real()          ::= "REAL"
Sequence()      ::= "SEQUENCE"
SequenceOf()    ::= "SEQUENCE-OF"


// Lower/greater than symbols (< and >)
LeftDiple() ::= "<"
RightDiple() ::= ">"

BlueTas(sBlueTasC,sTasName) ::= "$sTasName$~\ref{app:ASN1_$sBlueTasC$}"

Asn1Token(sKeyword) ::= "$sKeyword$"

StringLiteral(sStringLiteral) ::= "$sStringLiteral$"


TasName(sTasName, sTasNameC) ::= <<
\label{app:ASN1_$sTasNameC$}
$sTasName$~\ref{app:ICD_$sTasNameC$}
>>

TasName2(sTasName, sTasNameC) ::= <<
$sTasName$~\ref{app:ASN1_$sTasNameC$}
>>

Comment(sComment) ::= "$sComment$"

RealSizeExplained() ::= <<
why?~\ref{app:REAL_SIZE_EXPLAINED123}
>>

IntSizeExplained() ::= <<
why?~\ref{app:INT_SIZE_EXPLAINED123}
>>

ArraySizeExplained() ::= <<
why?~\ref{app:ARRAYS_SIZE_EXPLAINED123}
>>

ZeroSizeExplained() ::= <<
why?~\ref{app:ZERO_BITS_EXPLAINED123}
>>

EmitEnumItem(sName, nValue) ::= <<
\item $sName$ ($nValue$)
>>

EmitEnumItemWithComment(sName, nValue, sComment) ::= <<
\item $sName$ ($nValue$) -- $sComment$
>>

EmitEnumInternalContents(arrsItems) ::= <<
Enumeration's values:
\begin{itemize}
$arrsItems;separator="\n"$
\end{itemize}
>>

// applicable to Integers, booleans, reals, enumerated
EmitPrimitiveType(sColor, sTasName, sTasNameC, sAsnKindName, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, sAsn1Constraints, sMinBits, sMaxBits, arrsComments) ::= <<
\section{$if(sCommentLine)$$first(arrsComments)$$else$$sTasName$$endif$}\label{sec:ICD_$sTasNameC$}

\begin{itemize}
\item ASN.1 Type: $sTasName$ ($sAsnKindName$)
\item Min size: $sMinBytes$ bytes
\item Max size: $sMaxBytes$ bytes $sMaxBitsExplained$
\end{itemize}

$sCommentLine$

\begin{longtable}{|c|c|c|}
\caption{Type content for $sTasName$}\label{tab:param$sTasNameC$} \\\\
\hline
\rowcolor{gray!50}
\textbf{Constraints} & \textbf{Min Length (bits)} & \textbf{Max Length (bits)} \\\\
\hline\\hline
\endfirsthead
\rowcolor{gray!50}
\textbf{Constraints} & \textbf{Min Length (bits)} & \textbf{Max Length (bits)} \\\\
\hline\\hline
\endhead
$sAsn1Constraints$ & $sMinBits$ & $sMaxBits$$sMaxBitsExplained$ \\\\
\hline
\end{longtable}
\newpage

>>


EmitSequence(sColor, sTasName, sTasNameC, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsChildren, arrsComments) ::= <<
\section{$if(sCommentLine)$$first(arrsComments)$$else$$sTasName$$endif$}\label{sec:ICD_$sTasNameC$}

\begin{itemize}
\item ASN.1 Type: $sTasName$ (SEQUENCE)
\item Min size: $sMinBytes$ bytes
\item Max size: $sMaxBytes$ bytes $sMaxBitsExplained$
\end{itemize}

\begin{longtable}{|c|p{3cm}|p{5cm}|c|p{3cm}|c|c|c|}
\caption{Source Data Parameters for $sTasName$}\label{tab:param$sTasNameC$} \\\\
\hline
\rowcolor{gray!50}
\textbf{No} & \textbf{Field} & \textbf{Description} & \textbf{Optional} & \textbf{Type} & \textbf{Constraint} & \textbf{Min} & \textbf{Max} \\\\
\rowcolor{gray!50}
 & & & & & & \textbf{Length} & \textbf{Length} \\\\
\rowcolor{gray!50}
 & & & & & & \textbf{(bits)} & \textbf{(bits)} \\\\
\hline\\hline
\endfirsthead
\rowcolor{gray!50}
\textbf{No} & \textbf{Field} & \textbf{Description} & \textbf{Optional} & \textbf{Type} & \textbf{Constraint} & \textbf{Min} & \textbf{Max} \\\\
\rowcolor{gray!50}
 & & & & & & \textbf{Length} & \textbf{Length} \\\\
\rowcolor{gray!50}
 & & & & & & \textbf{(bits)} & \textbf{(bits)} \\\\
\hline\\hline
\endhead
$arrsChildren;separator="\n\\hline\n"$
\hline
\end{longtable}
\newpage
>>

EmmitSeqChild_RefType(sRefName, sRefNameC) ::= <<
$sRefName$~\ref{sec:ICD_$sRefNameC$}
>>

OddRow() ::= "OddRow"
EvenRow() ::= "EvenRow"

EmmitSequenceChild(sCssClass, nIndex, sName, sComment, sOptionality, sType, sConstraint, sMin, sMax) ::= <<
$nIndex$ & $sName$ & $sComment$ & $sOptionality$ & $sType$ & $sConstraint$ & $sMin$ & $sMax$ \\\\
>>


EmmitSequencePreambleSingleComment(nIndex, sOptChildName) ::= <<
\item bit $nIndex$ == 1 \$\Rightarrow\$ $sOptChildName$ is present
>>

EmmitSequencePreambleComment(arrsOptChildren) ::= <<
Special field used by PER to indicate the presence/absence of optional and default fields.
\begin{itemize}
$arrsOptChildren;separator="\n"$
\end{itemize}
>>


/* *** CHOICE ****/
EmitChoice(sColor, sTasName, sTasNameC, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsChildren, arrsComments) ::= <<
\section{$if(sCommentLine)$$first(arrsComments)$$else$$sTasName$$endif$}\label{sec:ICD_$sTasNameC$}

\begin{itemize}
\item ASN.1 Type: $sTasName$ (CHOICE)
\item Min size: $sMinBytes$ bytes
\item Max size: $sMaxBytes$ bytes $sMaxBitsExplained$
\end{itemize}

$if(sCommentLine)$
$sCommentLine$
$endif$

\begin{longtable}{|c|p{3cm}|p{5cm}|p{3cm}|c|c|c|}
\caption{Array content for $sTasName$}\label{tab:param$sTasNameC$} \\\\
\hline
\rowcolor{gray!50}
\textbf{No} & \textbf{Field} & \textbf{Description} & \textbf{Type} & \textbf{Constraint} & \textbf{Min} & \textbf{Max} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{Length} & \textbf{Length} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{(bits)} & \textbf{(bits)} \\\\
\hline\\hline
\endfirsthead
\rowcolor{gray!50}
\textbf{No} & \textbf{Field} & \textbf{Description} & \textbf{Type} & \textbf{Constraint} & \textbf{Min} & \textbf{Max} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{Length} & \textbf{Length} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{(bits)} & \textbf{(bits)} \\\\
\hline\\hline
\endhead

$arrsChildren;separator="\n\\hline\n"$

\hline
\end{longtable}
\newpage
>>


EmmitChoiceChild(sCssClass, nIndex, sName, sComment,  sType, sConstraint, sMin, sMax) ::= <<
$nIndex$ & $sName$ & $sComment$ & $sType$ & $sConstraint$ & $sMin$ & $sMax$ \\\\
>>

EmmitChoiceIndexSingleComment(nIndex, sChildName) ::= <<
\item $nIndex$ \$\Rightarrow\$ $sChildName$
>>

EmmitChoiceIndexComment(arrsOptChildren) ::= <<
Special field used by PER to indicate which choice alternative is present.
\begin{itemize}
$arrsOptChildren;separator="\n"$
\end{itemize}
>>


/* *********** CHOICE END ********** */
/* *********** SEQUENCE OF, OCTET STRING etc ********** */
EmitSizeable(sColor, sTasName, sTasNameC, sKind, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsRows, arrsComments) ::= <<
\section{$if(sCommentLine)$$first(arrsComments)$$else$$sTasName$$endif$}\label{sec:ICD_$sTasNameC$}

\begin{itemize}
\item ASN.1 Type: $sTasName$ ($sKind$)
\item Min size: $sMinBytes$ bytes
\item Max size: $sMaxBytes$ bytes $sMaxBitsExplained$
\end{itemize}

\begin{longtable}{|c|p{3cm}|p{5cm}|p{3cm}|c|c|c|}
\caption{Array content for $sTasName$}\label{tab:param$sTasNameC$} \\\\
\hline
\rowcolor{gray!50}
\textbf{No} & \textbf{Field} & \textbf{Description} & \textbf{Type} & \textbf{Constraint} & \textbf{Min} & \textbf{Max} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{Length} & \textbf{Length} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{(bits)} & \textbf{(bits)} \\\\
\hline\\hline
\endfirsthead
\rowcolor{gray!50}
\textbf{No} & \textbf{Field} & \textbf{Description} & \textbf{Type} & \textbf{Constraint} & \textbf{Min} & \textbf{Max} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{Length} & \textbf{Length} \\\\
\rowcolor{gray!50}
 & & & & & \textbf{(bits)} & \textbf{(bits)} \\\\
\hline\\hline
\endhead

$arrsRows;separator="\n\\hline\n"$

\hline
\end{longtable}
\newpage
>>

EmitRowWith3Dots() ::= <<
\multicolumn{7}{c|}{. . .} \\\\
>>


/* *********** end of SEQUENCE OF, OCTET STRING etc ********** */

EmmitTass(sTypeContent) ::= <<
$sTypeContent$
>>

/* Module - mapped to a Latex section */
EmmitModule(sModName, arrsComments, arrsTases) ::= <<
%=============================================================================
\chapter{$sModName$}\label{sec:$sModName$}
The following tables describe the binary encodings of the data model using the ASN.1 Unaligned Packed Encoding Rules

$arrsComments;separator="\n"$
%-----------------------------------------------------------------------------
$arrsTases;separator="\n"$
>>

/* File - Collection of modules */
EmmitFile(sAsnFileName, arrsModules) ::= <<
% ---- ASN.1 File : $sAsnFileName$ ----
$arrsModules;separator="\n"$
>>

/* Part 2 is the ASN.1 model itself with HTML syntax colouring */
EmmitFilePart2(sFileName, sAsn1Content) ::= <<
% File: $sFileName$
% sAsn1Content 
>>

RootHtml(arrsFiles1, arrsFiles2, bIntegerSizeMustBeExplained, bRealSizeMustBeExplained, bLengthSizeMustBeExplained, bWithComponentMustBeExplained, bZeroBitsMustBeExplained) ::= <<
\documentclass{report}
\usepackage{longtable}
\usepackage{pdflscape}
\usepackage{multirow}
\usepackage[table]{xcolor}
\begin{document}
\begin{landscape}
$arrsFiles1;separator="\n"$

$if(bIntegerSizeMustBeExplained)$
\label{app:INT_SIZE_EXPLAINED123}
Unconstraint integer's size explained
In unaligned PER, unconstraint integers are encoded into the minimum number of octets (using non negative binary integer or 2's-complement binary integer encoding) and a length determinant, containing the number of value octets, is added at the beginning of the encoding. Therefore uPER can support integers of any size, even of infinity value. However, in almost all processors, integers have limited capacity which is usually four or eight octets. Therefore, the reported maximum size in octets for an unconstraint integer is 1 (for the length determinant) plus the word size for the target processor which is specified in the command line by the wordSize argument. In this invocation, wordSize was specified to be 8 octets and therefore the maximum size of the unconstraint integers is 9 octets or 72 bits
$endif$
$if(bRealSizeMustBeExplained)$
\label{app:REAL_SIZE_EXPLAINED123}
Real's size explained
In both uPER and aPER, real values are encoded as a pair of integers which represent the mantissa and exponent (real value = mantissa* 2<span style="vertical-align: super">exponent</span>). In particular, a real is encoded into a length determinant field, a header field (always one octet), the exponent field using 2's complement binary integer and the mantissa field. Therefore uPER can support reals with infinity precision since both exponent and mantissa can, theoretically, have infinity length. However, in almost all processors, integers have limited capacity which is usually four or eight octets. Therefore, the reported maximum size in octets for a real is 1 for the length determinant plus 1 for header field plus 3 octets for exponent and finally plus the word size for the target processor which is specified in the command line by the wordSize argument. In this invocation, wordSize was specified to be 8 octets and therefore the maximum size of a real is 13 octets or 104 bits.
$endif$
$if(bLengthSizeMustBeExplained)$
\label{app:ARRAYS_SIZE_EXPLAINED123}
Length's size explained
In uPER, the length determinant field, which used in the encoding of sizeable types such as SEQUENCE OFs, SET OFs, BIT STRINGs, OCTET STRINGs and character types, is at most two octets provided that (a) there is a SIZE constraint which limits the length count to a value less than 64K or (b) there is no size constraint, but in the given instance of the sizeable type the number of the elements is less than 16K. In all other cases, the sizeable type is encoded using fragmentation where the length determinant is encoded interstitially with the actual data. In this particular case (i.e. when fragmentation is applicable), the table produced by the autoICD generator does not represent correctly the physical PER encoding.
$endif$
$if(bWithComponentMustBeExplained)$
\label{app:WITH_COMPONENT_EXPLAINED123}
Constraint ignored in encoding
The constraint with the yellow color is not PER visible, as it derives from a WITH COMPONENT or WITH COMPONENTS contraint in the parent type, and therefore is ignored in the encoding/decoding.
$endif$
$if(bZeroBitsMustBeExplained)$
\label{app:ZERO_BITS_EXPLAINED123}
Field with zero size explained
An integer type that is contraint to a single value (i.e. INTEGER (5) or INTEGER (1..10)(10..20)) requires zero bits when encoded in uPER since the decoder can always determine its value. In other words, a integer field which is contraint to a single value is never transmitted in uPER.
$endif$

$arrsFiles2;separator="\n"$
\end{landscape}
\end{document}
>>


