/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group spark_uper:spark_spec;


TasEncodeMain(sName, bAcnEncodeFuncRequiresResult) ::= /*nogen*/<<
PROCEDURE <sName>_uPER_Encode(val:in <sName>; Stream : OUT <sName>_uPER_Stream<if(bAcnEncodeFuncRequiresResult)>; result : OUT <rtlModuleName()>.ASN1_RESULT<endif>)
IS
BEGIN
    Stream := <sName>_uPER_Stream'(K => 0, DataLen => 0, Data => <sName>_uPER_bit_array'(others => 0));
    <sName>_uPER_Encode_aux(val, Stream.Data, Stream.DataLen<if(bAcnEncodeFuncRequiresResult)>, result<endif>);
END <sName>_uPER_Encode;
>>

Tas_encode(sName, bAcnEncodeFuncRequiresResult, arrsLocalVariables, sContent, bIsFixedSize, bResDependsOnData, bKDependsOnData, arrsAnnotations) ::= <<
PROCEDURE <sName>_uPER_Encode_aux(val:in <sName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural<if(bAcnEncodeFuncRequiresResult)>; result : OUT <rtlModuleName()>.ASN1_RESULT<endif>)
<arrsAnnotations;separator="\n">
IS
    <arrsLocalVariables; separator="\n">
BEGIN
    <if(bAcnEncodeFuncRequiresResult)>
    result := <sName>_IsConstraintValid(val);
    IF result.success THEN
        --result.ErrorCode := <rtlModuleName()>.ERR_INCORRECT_DATA;
        <sContent>
    END IF;
    <else>
    <sContent>
    <endif>
END <sName>_uPER_Encode_aux;

<TasEncodeMain(sName=sName, bAcnEncodeFuncRequiresResult=bAcnEncodeFuncRequiresResult)>
>>

TasDecodeMain(sName) ::= /*nogen*/<<
PROCEDURE <sName>_uPER_Decode(val: out <sName>; Stream : IN <sName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
    iter:<rtlModuleName()>.DECODE_PARAMS;
BEGIN
    iter := <rtlModuleName()>.DECODE_PARAMS'(K => 0, DataLen => Stream.DataLen);
    <sName>_uPER_Decode_aux(val, Stream.Data, iter, result);
    result.Success := result.Success AND iter.K\<=iter.DataLen;
END <sName>_uPER_Decode;
>>

Tas_decode(sName, bAcnEncodeFuncRequiresResult, arrsLocalVariables, sContent, bIsFixedSize, bResDependsOnData, bKDependsOnData, arrsAnnotations) ::= <<
PROCEDURE <sName>_uPER_Decode_aux(val:out <sName>; S : in <rtlModuleName()>.BitArray; K : in out <rtlModuleName()>.DECODE_PARAMS; result : OUT <rtlModuleName()>.ASN1_RESULT)
<arrsAnnotations;separator="\n">
IS
    <arrsLocalVariables; separator="\n">
BEGIN
    <sContent>
END <sName>_uPER_Decode_aux;

<TasDecodeMain(sName=sName)>
>>



/*case: A:: = INTEGER (5..20) */
IntFullyConstraint_encode(p, nMin, nMax, nBits, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <p>, <nMin>, <nBits>);"
IntFullyConstraint_decode(p, nMin, nMax, nBits, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, <p>, <nMin>, <nMax>, <nBits>, result.Success);
>>

/*case: A :: = INTEGER */
IntUnconstraint_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_UnConstraintWholeNumber(S, K, <p>);"
IntUnconstraint_decode(p, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_UnConstraintWholeNumber(S, K, <p>, result.Success);
>>

/*case: A :: = INTEGER(MIN..5) */
IntUnconstraintMax_encode(p, nMax, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_UnConstraintWholeNumber(S, K, <p>);"
IntUnconstraintMax_decode(p, nMax, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_UnConstraintWholeNumberMax(S, K, <p>, <nMax>, result.Success);
>>


/*case: A:: = INTEGER (5..MAX) */
IntSemiConstraint_encode(p, nMin, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_SemiConstraintWholeNumber(S, K, <p>, <nMin>);"
IntSemiConstraint_decode(p, nMin, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_SemiConstraintWholeNumber(S, K, <p>, <nMin>, result.Success);
>>


/*case: A:: = INTEGER (5..40,...) */
IntRootExt_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
IF <sRootBaseConstraint> THEN
    <rtlModuleName()>.BitStream_AppendBit(S, K, 0); -- write extension bit
    <sIntBody>
END IF;
>>

Declare_ExtensionBit()::="extBit:<rtlModuleName()>.BIT;"

IntRootExt_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<p> := <nMin>;
<rtlModuleName()>.BitStream_ReadBit(S, K, extBit, result.Success); -- read extension bit
IF result.Success THEN
    IF extBit=0 THEN --extBit is zero ==> value is expecteted within root range
        <sIntBody>
    ELSE
        <IntUnconstraint_decode(p=p, sErrCode=sErrCode)>
    END IF;
END IF;
>>


/*case: A:: = INTEGER (5..40,..., 60..70) */
IntRootExt2_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
IF <sRootBaseConstraint> THEN
    <rtlModuleName()>.BitStream_AppendBit(S, K, 0); -- value within root range, so ext bit is zero
    <sIntBody>
ELSE
    -- value is not within root range, so ext bit is one and value is encoded as uncostraint
    <rtlModuleName()>.BitStream_AppendBit(S, K, 1);
    <IntUnconstraint_encode(p=p, sErrCode=sErrCode)>
END IF;
>>

IntRootExt2_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::= "<IntRootExt_decode(p=p, nMin=nMin, sIntBody = sIntBody, sErrCode=sErrCode)>"


Null_encode(p) ::= <<
<rtlModuleName()>.Acn_Enc_NullType(S, K, <p>);
>>

Null_decode(p) ::= <<
<rtlModuleName()>.Acn_Dec_NullType(S, K, <p>, result);
>>

Boolean_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_Boolean(S, K, <p>);"

Boolean_decode(p, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_boolean(S, K, <p>, result.Success);
>>

Real_encode(p, sErrCode) ::= "<rtlModuleName()>.UPER_Enc_Real(S, K, <p>);"
Real_decode(p, sErrCode) ::= <<
<rtlModuleName()>.UPER_Dec_Real(S, K, <p>, result);
>>


Declare_EnumIndex()::="intVal:<rtlModuleName()>.Asn1Int;"

Declare_AsnIntForMappingFuncion()::="mapFuncIntVal:<rtlModuleName()>.Asn1Int;"

Enumerated_item_encode(p, sName, nIndex) ::= "when <sName>    => intVal := <nIndex>;"

Enumerated_item_decode(p, sName, nIndex) ::= "when <nIndex> => <p> := <sName>;"

Enumerated_encode(p, sTasName, arrsItem, nMin, nMax, nBits, sErrCode) ::= <<
case <p> is 
    <arrsItem; separator="\n">
end case;
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, intVal, <nMin>, <nBits>);
>>

Enumerated_decode(p, sTasName, arrsItem, nMin, nMax, nBits, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<p> := <sTasName>_Init;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, intVal, <nMin>, <nMax>, <nBits>, result.Success);
IF result.Success THEN
    case <sTasName>_index_range(intVal) is
        <arrsItem; separator="\n">
    end case;
END IF;
>>




Sequence_optChild_encode(p, sChName, sErrCode) ::= "<rtlModuleName()>.BitStream_AppendBit(S, K,<p>.Exist.<sChName>);"
Sequence_optChild_decode(p, sChName, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.BitStream_ReadBit(S, K,<p>.Exist.<sChName>, result.Success);
>>




Sequence_Child_encode(p, sChName, bIsUperOptional, sChildContent, bHasDefaultValue) ::= <<
--Encode <sChName> 
<if(bIsUperOptional)>
IF <p>.Exist.<sChName> = 1 THEN
    <sChildContent>
END IF;
<else>
<sChildContent>
<endif>
>>


Sequence_Child_decode(p, sChName, bIsUperOptional, sChildContent, bHasDefaultValue) ::= <<
--Decode <sChName> 
<if(bIsUperOptional)>
IF <p>.Exist.<sChName> = 1 THEN
    <sChildContent>
<if(bHasDefaultValue)>
ELSE
    <p>.exist.<sChName> := 1; --default value taken from initialize

<endif>
END IF;
<else>
<sChildContent>
<endif>

>>




JoinItems_encode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
--# assert K~+1>= S'First and K~ + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND
--#	       K>=K~ and K\<=K~+<nRequiredBitsSoFar>;	
<if(bRequiresResultCheck)>
IF result.Success THEN
    <sNestedPart>
END IF;
<else>
<sNestedPart>
<endif>
<endif>

>>


JoinItems_decode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
--# assert K~.K+1>= S'First and K~.K + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND
--#	       K.K>=K~.K and K.K\<=K~.K+<nRequiredBitsSoFar>;	
IF result.Success THEN
    <sNestedPart>
END IF;
<endif>
>>



Sequence_encode(p, arrsChildren, sTasName, bRequiresInit) ::= <<
<if(arrsChildren)>
<arrsChildren; separator="\n">

<else>
null;

<endif>
>>


Sequence_decode(p, arrsChildren, sTasName, bRequiresInit) ::= <<
<if(bRequiresInit)>val := <sTasName>_Init;<endif>

<if(arrsChildren)>
<arrsChildren; separator="\n">

<else>
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);


<endif>
>>


ChoiceChild_encode(sTasName, sName, sChildBody, nIndex, nIndexSizeInBits, sNamePresent) ::= <<
WHEN <sNamePresent> =>
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <nIndex>, 0, <nIndexSizeInBits>);
    <sChildBody>
>>

ChoiceChild_decode(sTasName, sName, sChildBody, nIndex, nIndexSizeInBits, sNamePresent) ::= <<
WHEN <nIndex> =>
    <sChildBody>
    IF result.Success THEN
        val := <sTasName>_<sName>_set(<sName>_tmp);
    END IF;
>>

ChoiceChild_tmpVar(sName, sTypeDecl) ::= "<sName>_tmp:<sTypeDecl>;"

Choice_encode(sTasName, arrsChildren, nIndexMax, nIndexSizeInBits) ::= <<
CASE <sTasName>_kind(val) IS
    <arrsChildren; separator="\n">
END CASE;
>>

Declare_ChoiceIndex()::="index:<rtlModuleName()>.Asn1Int;"
Choice_decode(sTasName, arrsChildren, nIndexMax, nIndexSizeInBits) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, index, 0, <nIndexMax>, <nIndexSizeInBits>, result.Success);
IF result.Success THEN
    CASE <sTasName>_index_range(index) IS
        <arrsChildren; separator="\n">
    END CASE;
END IF;
>>


ReferenceType1_encode(p, sName, bAcnEncodeFuncRequiresResult) ::= "<sName>_uPER_Encode_aux(<p>, S, K<if(bAcnEncodeFuncRequiresResult)>, result<endif>);"
ReferenceType1_decode(p, sName, bAcnEncodeFuncRequiresResult) ::= "<sName>_uPER_Decode_aux(<p>, S, K, result);"

ReferenceType2_encode(p, sTasName, sName, bAcnEncodeFuncRequiresResult) ::= "<sTasName>.<sName>_uPER_Encode_aux(<p>, S, K<if(bAcnEncodeFuncRequiresResult)>, result<endif>);"
ReferenceType2_decode(p, sTasName, sName, bAcnEncodeFuncRequiresResult) ::= "<sTasName>.<sName>_uPER_Decode_aux(<p>, S, K, result);"


loopFixedItem_enc (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
WHILE <i>\<= <fixedSize> LOOP
--# assert  <i> >=1 and <i>\<=<fixedSize>  and <fixedSize>\<= <nfixedSizeUperLimit> and
--#        K>=K~ and K\<=K~ + <nCurOffset> + <nAlignSize> + <nIntItemMaxSize>*(<i>-1);
    <sInternalItem>
    <i> := <i> + 1;
END LOOP;
>>


loopFixedItem_dec (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
WHILE <i>\<= <fixedSize> AND result.Success LOOP
--# assert  <i> >=1 and <i>\<=<fixedSize>  and <fixedSize>\<= <nfixedSizeUperLimit> and
--#        K.K>=K~.K and K.K\<=K~.K + <nCurOffset> + <nAlignSize> + <nIntItemMaxSize>*(<i>-1);
    <sInternalItem>
    <i> := <i> + 1;
END LOOP;
>>



InternalItem_oct_str_encode(p, i) ::=<<
<rtlModuleName()>.BitStream_AppendByte(S, K, <p>.Data(<i>), FALSE);
>>

InternalItem_oct_str_decode(p, i) ::=<<
<rtlModuleName()>.BitStream_DecodeByte(S, K, <p>.Data(<i>), result.Success);
>>

InternalItem_bit_str_encode(p, i) ::=<<
<rtlModuleName()>.BitStream_AppendBit(S, K, <p>.Data(<i>));
>>

InternalItem_bit_str_decode(p, i) ::=<<
<rtlModuleName()>.BitStream_ReadBit(S, K, <p>.Data(<i>), result.Success);
>>


oct_sqf_FixedSize_encode(p, i, sInternalItem, nFixedSize, sTasName, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

oct_sqf_FixedSize_decode(p, i, sInternalItem, nFixedSize, sTasName, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


oct_sqf_VarSize_encode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(<p>.Length), <nSizeMin>, <nSizeInBits>);
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


Declare_Length()::="length:Integer;"

oct_sqf_VarSize_decode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, length, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<p>.Length := length;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>





/* IA5String & Numeric String */
Declare_CharValue() ::= "charIndex:Integer;"


InternalItem_string_no_alpha_encode(p, i) ::=<<
charIndex := <rtlModuleName()>.CharacterPos(<p>(<i>));
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(charIndex), 0, 7);
>>


InternalItem_string_no_alpha_decode(p, i) ::=<<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, charIndex, 0, 127, 7, result.Success);
<p>(<i>) := Character'Val(charIndex);
>>


InternalItem_string_with_alpha_encode(p, sTasName, i, nCharIndexSize, nCharIndexMax) ::=<<
charIndex := <rtlModuleName()>.GetZeroBasedCharIndex(<p>(<i>), <sTasName>_alpha_set);
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(charIndex), 0, <nCharIndexSize>);
>>

InternalItem_string_with_alpha_decode(p, sTasName, i, nCharIndexSize, nCharIndexMax) ::=<<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, charIndex, 0, <nCharIndexMax>, <nCharIndexSize>, result.Success);
<p>(<i>) := <sTasName>_alpha_set(charIndex+1);
>>




str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_VarSize_encode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
length := <rtlModuleName()>.getStringSize(<p>);
result.Success := length >= <nSizeMin> AND length \<= <nSizeMax>;
IF result.Success THEN
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(length), <nSizeMin>, <nSizeInBits>);
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize="length", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
END IF;
>>

str_VarSize_decode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, length, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize="length", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


str_length(p) ::= "<rtlModuleName()>.getStringSize(<p>)"
bit_oct_sqof_length(p) ::= "<p>.Length"


Declare_nCount()::="nCount:Integer;"
Declare_curBlockSize()::="curBlockSize:Integer;"
Declare_curItem()::="curOffset:Integer:=1;"
Declare_len2()::="len2:Integer;"





Tas_fragmentation_encode(sName, arrsLocalVariables, sContent, bIsFixedSize, bResDependsOnData, bKDependsOnData, nIntItemMaxSize, sInternalItem,nUperMax, bAcnEncodeFuncRequiresResult) ::= <<
PROCEDURE <sName>_uPER_Encode_aux(val:in <sName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural<if(bAcnEncodeFuncRequiresResult)>; result : OUT <rtlModuleName()>.ASN1_RESULT<endif>)
IS
    --# hide <sName>_uPER_Encode_aux;
    J:INTEGER:=1;
    <arrsLocalVariables; separator="\n">
    PROCEDURE ENCODE_BLOCK(val:in <sName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural; startOffset: IN INTEGER; curBlockSize:INTEGER)
    --# derives S from S, K, val, startOffset, curBlockSize &
    --#        K from K, curBlockSize;
    --# pre curBlockSize>=0 and startOffset>=1 and startOffset+curBlockSize-1\<=<nUperMax> and
    --#     K+1 >= S'First AND K + (startOffset+curBlockSize-1)*<nIntItemMaxSize> \<= S'Last;
    --# post K>=K~ and K\<=K~ + curBlockSize*<nIntItemMaxSize>;
    IS 
        I1:INTEGER;
        J: INTEGER:=0;
    BEGIN
        WHILE J \<= curBlockSize-1 LOOP
            I1 := startOffset + J;
        --# assert  curBlockSize>=0 and startOffset>=1 and startOffset+curBlockSize-1\<=<nUperMax> and
        --#         K~+1 >= S'First AND K~ + (startOffset+curBlockSize-1)*<nIntItemMaxSize> \<= S'Last and
        --#         I1 >=startOffset and I1\<=startOffset + curBlockSize-1  and 
        --#         K>=K~ and K\<=K~+ <nIntItemMaxSize>*J and I1= startOffset + J;
            <sInternalItem>
            J := J + 1;
        END LOOP;
    END ENCODE_BLOCK;
BEGIN
    <if(bAcnEncodeFuncRequiresResult)>
    result := <sName>_IsConstraintValid(val);
    IF result.success THEN
        --result.ErrorCode := <rtlModuleName()>.ERR_INCORRECT_DATA;
        <sContent>
    END IF;
    <else>
    <sContent>
    <endif>
END <sName>_uPER_Encode_aux;

<TasEncodeMain(sName=sName, bAcnEncodeFuncRequiresResult=bAcnEncodeFuncRequiresResult)>
>>





/*
Fragmentation_FixedSize_Fragment_encode(nLenDetValue, nLenDetSize, nOffset, nBlockSize) ::= <<
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <nLenDetValue>, 0, <nLenDetSize>);
ENCODE_BLOCK(val,S,K,<nOffset>,<nBlockSize>);
>>

Fragmentation_FixedSize_encode(arrsFragments) ::= <<
<arrsFragments; separator="\n">
>>
*/

Fragmentation_sqf_encode(sCount, sInternalItem, nIntItemMaxSize, nUperMax, bHasLength, sTasName) ::= <<
nCount := <sCount>;
WHILE nCount >= 16#4000# AND J\<<sCount> LOOP
    IF nCount >= 16#10000# THEN
        curBlockSize := 16#10000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C4#, 0, 8);
    ELSIF nCount >= 16#C000# THEN
        curBlockSize := 16#C000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C3#, 0, 8);
    ELSIF nCount >= 16#8000# THEN
        curBlockSize := 16#8000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C2#, 0, 8);
    ELSE 
        curBlockSize := 16#4000#;
        <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, 16#C1#, 0, 8);
    END IF;

    --# assert  K~+1>= S'First and K~ + <sTasName>_REQUIRED_BITS_FOR_ENCODING \<= S'Last AND <sCount>\<=<nUperMax> AND
    --#         curOffset = <sCount> - nCount + 1  AND nCount>= curBlockSize AND curOffset+curBlockSize-1\<=<nUperMax> and
    --#         K >= K~ AND K\<=K~+J*8+ (curOffset-1)*<nIntItemMaxSize>;

    ENCODE_BLOCK(val,S,K,curOffset,curBlockSize);

    curOffset := curOffset + curBlockSize;
    nCount := nCount - curBlockSize;

    J:=J+1;
END LOOP;

IF nCount \<= 16#7F# THEN
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(nCount), 0, 8);
ELSE
    <rtlModuleName()>.BitStream_AppendBit(S, K, 1);
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(nCount), 0, 15);
END IF;

ENCODE_BLOCK(val,S,K,curOffset,nCount);
>>

Tas_fragmentation_decode(sName, arrsLocalVariables, sContent, bIsFixedSize, bResDependsOnData, bKDependsOnData, nIntItemMaxSize, sInternalItem,nUperMax, bAcnEncodeFuncRequiresResult) ::= <<
PROCEDURE <sName>_uPER_Decode_aux(val:out <sName>; S : in <rtlModuleName()>.BitArray; K : in out <rtlModuleName()>.DECODE_PARAMS; result : OUT <rtlModuleName()>.ASN1_RESULT)
IS
    --# hide <sName>_uPER_Decode_aux;
    <arrsLocalVariables; separator="\n">
BEGIN
    <sContent>
END <sName>_uPER_Decode_aux;

<TasDecodeMain(sName=sName)>
>>


Fragmentation_sqf_decode(sCount, sInternalItem, nIntItemMaxSize, nUperMax, bHasLength, sTasName) ::= <<
val := <sTasName>_Init;
<if(bHasLength)>length := 0;<endif>
curBlockSize := 0;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, nCount, 0, 255, 8, result.Success);

WHILE result.Success AND (nCount = 16#C4# OR nCount = 16#C3# OR nCount = 16#C2# OR nCount = 16#C1#)  LOOP
    --# assert I1 >=curOffset and I1\<=curOffset + nCount ;
    IF nCount = 16#C4# THEN
        curBlockSize := 16#10000#;
    ELSIF nCount = 16#C3# THEN
        curBlockSize := 16#C000#;
    ELSIF nCount = 16#C2# THEN
        curBlockSize := 16#8000#;
    ELSE 
        curBlockSize := 16#4000#;
    END IF;

    I1 := curOffset;
    WHILE I1\<= curOffset + curBlockSize - 1 AND result.Success LOOP
    --# assert  I1 >=curOffset and I1\<=curOffset + nCount  and 
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(I1-1);
        <sInternalItem>
        I1 := I1 + 1;
    END LOOP;
    <if(bHasLength)>length := length + curBlockSize;<endif>
    curOffset := curOffset + curBlockSize;
    <rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, nCount, 0, 255, 8, result.Success);
END LOOP;

IF nCount > 16#80# THEN
    nCount := (nCount - 16#80#) * 16#100#;
    <rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, len2, 0, 255, 8, result.Success);
    IF result.Success THEN
         nCount := nCount + len2;
    END IF;
END IF;

IF curOffset + nCount -1 \<= <nUperMax> THEN
    I1 := curOffset;
    WHILE I1\<= curOffset + nCount -1 LOOP
    --# assert  I1 >=curOffset and I1\<=curOffset + nCount  and 
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(I1-1);
        <sInternalItem>
        I1 := I1 + 1;
    END LOOP;
    <if(bHasLength)><sCount> := length + nCount;<endif>
END IF;
>>

