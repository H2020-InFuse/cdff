/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group spark_main:spark_spec;


PrintMain_testCases(arrsIncludedModules, arrsTestFunctions, arrsUsedPackages, arrsInitCalls, arrsChoiceVasCalls, bGenerateDatFile) ::= <<
WITH Ada.Text_IO;
<if(bGenerateDatFile)>
with Ada.Sequential_IO;
with Interfaces;
use type Interfaces.Unsigned_8;
<endif>
WITH <rtlModuleName()>; use type <rtlModuleName()>.Asn1UInt; use type <rtlModuleName()>.Asn1Int;use type <rtlModuleName()>.BIT;
<arrsIncludedModules:{inc| WITH <inc>;}; separator="\n">
--# inherit <rtlModuleName()>, <arrsIncludedModules; separator=", ">;
--# main_program;


FUNCTION MainProgram RETURN INTEGER
IS --# hide MainProgram
    USE Ada.Text_IO;
    <arrsUsedPackages:{p|USE <p>;}; separator="\n">
    result      : <rtlModuleName()>.TEST_CASE_RESULT;
    totalErrors  : INTEGER:=0;
    
<if(bGenerateDatFile)>
    PROCEDURE WRITE_STR_TO_FILE(Strm : <rtlModuleName()>.BitArray; 
			        DataLen	: Natural;
                                fileName:String) IS
      package Seq_IO is new Ada.Sequential_IO(<rtlModuleName()>.Asn1Byte);
      use Seq_IO;

      MASKS : CONSTANT <rtlModuleName()>.OctetBuffer (1 .. 8) := (16#80#, 16#40#, 16#20#, 16#10#, 16#08#, 16#04#, 16#02#, 16#01#);
      curByte:<rtlModuleName()>.Asn1Byte:=0;
      bitIndex:Integer;
      My_Out_File : Seq_IO.FILE_TYPE;
    BEGIN
      Create(My_Out_File, Out_File, fileName);

      FOR I IN 1..DataLen LOOP
         bitIndex := ((I-1) mod 8) +1;
         IF bitIndex = 1 THEN
            curByte:=0;
         END IF;
         IF Strm(I)=1 THEN
           curByte := curByte OR MASKS(bitIndex);
         END IF;
         IF bitIndex = 8 OR I = DataLen THEN
            Write(My_Out_File, curByte);
         END IF;
      END LOOP;

      Close(My_Out_File);
    END;

<endif>
BEGIN

    <arrsTestFunctions;separator="\n\n">

    -- used to increase statement coverage
    <arrsInitCalls; separator="\n\n">

    <arrsChoiceVasCalls; separator="\n\n">

    IF totalErrors > 0 THEN
        Put_Line (Integer'Image(totalErrors) & " out of <arrsTestFunctions.Length> failed."); 
        RETURN 1;
    ELSE
        Put_Line ("All test cases (<arrsTestFunctions.Length>) run successfully."); 
        RETURN 0;
    END IF;
END MainProgram;
>>


/* 
Code calling a test case
*/
PrintMain_call_codec(sTasName, sModName, sEnc, sValue, sValueAsAsn1, sVasName, bHasValidateFunc, bGenerateDatFile) ::= <<
result := <sModName>_auto_encs_decs.<sTasName>_<sEnc>_enc_dec(<sValue>);
IF NOT result.Success THEN
    CASE result.Step IS
        WHEN <rtlModuleName()>.TC_VALIDATE =>
            Put_Line ("Test case '<sVasName>' failed in validation"); 
        WHEN <rtlModuleName()>.TC_ENCODE =>
            Put_Line ("Test case '<sVasName>' failed in encoding");
        WHEN <rtlModuleName()>.TC_DECODE =>
            Put_Line ("Test case '<sVasName>' failed in decoding");
        WHEN <rtlModuleName()>.TC_VALIDATE_DECODED =>
            Put_Line ("Test case '<sVasName>' failed in the validation of the decoded message");
        WHEN <rtlModuleName()>.TC_EQUAL =>
            Put_Line ("Test case '<sVasName>' failed. Encoded and decoded messages are different");
    END CASE;
    Put_Line ("Test Value was <sValueAsAsn1>");
    Put_Line ("========================================");
    totalErrors := totalErrors + 1;
END IF;
<if(bGenerateDatFile)>
IF result.Success THEN
    DECLARE
    	stream   : <sModName>.<sTasName>_uPER_Stream;
        <if(bHasValidateFunc)>
        ret      : <rtlModuleName()>.ASN1_RESULT;
        <endif>
    BEGIN
        <if(bHasValidateFunc)>
        <sModName>.<sTasName>_uPER_Encode(<sValue>, stream, ret);
        <else>
        <sModName>.<sTasName>_uPER_Encode(<sValue>, stream);
        <endif>
	    WRITE_STR_TO_FILE(Strm => stream.Data,DataLen => stream.DataLen, fileName => "asn1scc_<sEnc>.dat");
    END;
END IF;
<endif>
>>

PrintMain_call_init(sTasName, sModName) ::= <<
DECLARE
    dummy:<sModName>.<sTasName>;
BEGIN
    dummy:=<sModName>.<sTasName>_Init;
END;
>>


PrintMain_call_choice_valAss(sTasName, sModName, sVasName, sVasModule) ::= <<
DECLARE
    dummy:<sModName>.<sTasName>;
BEGIN
    dummy:= <sVasModule>.<sVasName>; 
END;
>>




PrintLineInIndexFile(sModName, sOutDir) ::= <<
<sModName>    specification is in <sModName>.ads
<sModName>    body          is in <sModName>.adb
>>

PrintIndexFile(arrsModules) ::= <<
<arrsModules; separator="\n">
>>


PrintMakeFile(arrsModuleList) ::=<<
all:
	gnatmake -gnat2012 -d -P GPS_project.gpr mainprogram.adb --subdirs=debug -cargs -g -O0
	touch builtWithoutCoverage
	
coverage:
	if [ -f builtWithoutCoverage ] ; then make clean ; fi
	gnatmake -gnat2012 -d -P GPS_project.gpr mainprogram.adb --subdirs=debug -cargs -g -O0 -fprofile-arcs -ftest-coverage -largs -fprofile-arcs
	cd bin/debug ; ./mainprogram
	cd bin/debug ; gcov <arrsModuleList; separator=" ">
	
clean:
	rm -f builtWithoutCoverage ;
	gnat clean -r -P GPS_project.gpr --subdirs=debug	
>>