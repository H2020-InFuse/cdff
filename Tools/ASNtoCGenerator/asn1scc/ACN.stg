/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group acn;

PrintAsn1File(arrsModules) ::= <<
<arrsModules: {mod| <mod>}; separator="\n">
>>


PrintModule(sName, arrsTas) ::= <<
<sName> DEFINITIONS AUTOMATIC TAGS ::= BEGIN

<arrsTas: {tas|<tas>}; separator="\n\n">

END
>>



PrintParam(sName, sType, sMode) ::= "<sName>:<sMode> <sType>"

PrintTemp(sName, sType) ::= "<sName>:<sType>"

PrintTypeAssigment(sName, arrsParasm, arrsTempTypes, sType) ::= <<
<sName><if(arrsParasm)>(<arrsParasm; separator=", ">)<endif><if(arrsTempTypes)> 
    LOCALS {
        <arrsTempTypes; separator=",\n">
    } 

<endif><sType>
>>


PrintTypeChild(sName, arrsArgs, sImplMode, sType) ::= <<
<sName><if(arrsArgs)>\<<arrsArgs; separator=", "> ><endif> <sImplMode> <sType>
>>

PrintType(arrsProps, arrsChildren) ::= <<
[<arrsProps; separator=" ">] <if(arrsChildren)> { 
    <arrsChildren; separator=",\n">
}
<endif>
>>


/* Print ACN Property Functions */

PP_Encoding_PosInt() ::= "encoding pos-int"
PP_Encoding_TwosComplement() ::= "encoding twos-complement"
PP_Encoding_Ascii() ::= "encoding ASCII"
PP_Encoding_BCD() ::= "encoding BCD"
PP_Encoding_IEEE754_32() ::= "encoding IEEE754-1985-32"
PP_Encoding_IEEE754_64() ::= "encoding IEEE754-1985-64"

PP_Size_Auto() ::=  "size auto"   
PP_Size_NullTerminated() ::=  "size null-terminated"   
PP_Size_Fixed(nFixedValue) ::= "size <nFixedValue>"
PP_Sixe_Fld(sLongFld) ::= "size <sLongFld>"

PP_Adjust(nValue) ::= "adjust <nValue>"

PP_Aligment_byte() ::= "align-to-next byte"
PP_Aligment_word() ::= "align-to-next word"
PP_Aligment_dword() ::= "align-to-next dword"

PP_EncodeValues() ::= "encode-values"

PP_TrueValue(sVal) ::= "true-value <sVal>"
PP_FalseValue(sVal) ::= "false-value <sVal>"

PP_NullValue(sVal) ::= "pattern <sVal>"

PP_Endianness_big() ::="endianness big"
PP_Endianness_little() ::="endianness little"

PP_PresentWhenConditionBool(sLongField) ::= "present-when  <sLongField>"
PP_PresentWhenConditionInt(sLongField, nVal) ::= "present-when  <sLongField> == <nVal>"
PP_PresentWhenConditionStr(sLongField, sVal) ::= "present-when  <sLongField> == <sVal>"
PP_PresentWhen(arrsConditios) ::= "present-when <arrsConditios; separator=\" \">"

PP_ChoiceDeterminant(sLongFdlToEnum) ::= "determinant <sLongFdlToEnum>"

PP_MappingFunction(sFuncName)   ::= "mapping-function <sFuncName>"