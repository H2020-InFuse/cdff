/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group xer;




PrintTas_encode(sName, sStar, arrsLocalVariables, sContent) ::= <<
flag <sName>_XER_Encode(const <sName><sStar> pVal, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">
    
	ret = bCheckConstraints ? <sName>_IsConstraintValid(pVal, pErrCode) : TRUE ;
	if (ret) {
	    <sContent>
    }

	return ret;
}
>>

PrintTas_decode(sName, sStar, arrsLocalVariables, sContent) ::= <<
flag <sName>_XER_Decode(<sName><sStar> pVal, ByteStream* pByteStrm, int* pErrCode)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">

	<sContent>

	return ret;
}
>>

PrintTasWithTag_encode(sName, sStar, arrsLocalVariables, sContent) ::= <<
flag <sName>_XER_Encode_aux(const <sName><sStar> pVal, const char* xmlTag, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">
    
	ret = bCheckConstraints ? <sName>_IsConstraintValid(pVal, pErrCode) : TRUE ;
	if (ret) {
	    <sContent>
    }

	return ret;
}
>>


PrintTasWithTag_decode(sName, sStar, arrsLocalVariables, sContent) ::= <<
flag <sName>_XER_Decode_aux(<sName><sStar> pVal, const char* xmlTag, ByteStream* pByteStrm, int* pErrCode)
{
    flag ret = TRUE;
	<arrsLocalVariables:{lv|<lv>}; separator="\n">

	<sContent>

	return ret;
}
>>



Integer_encode(p, sTag, nLevel) ::= <<
ret = Xer_EncodeInteger(pByteStrm, <sTag>, <p>, pErrCode, <nLevel>);
>>
Integer_decode(p, sTag, nLevel) ::= <<
ret = Xer_DecodeInteger(pByteStrm, <sTag>, <p>, pErrCode);
>>


BOOLEAN_encode(p, sTag, nLevel) ::= <<
ret = Xer_EncodeBoolean(pByteStrm, <sTag>, <p>, pErrCode, <nLevel>);
>>

BOOLEAN_decode(p, sTag, nLevel) ::= <<
ret = Xer_DecodeBoolean(pByteStrm, <sTag>, <p>, pErrCode);
>>

ENUMERATED_item_encode(p, sTag, nLevel, sItemID, sXerValue, bFirst) ::= <<
case <sItemID>:
	ret = Xer_EncodeEnumerated(pByteStrm, <sTag>, "<sXerValue>", pErrCode, <nLevel>);
	break;
>>

ENUMERATED_encode(p, sTag, nLevel, arrsItems) ::= <<
switch(<p>) 
{
    <arrsItems; separator="\n">
    default:
	    *pErrCode = ERR_INVALID_XML_FILE;
	    return FALSE;
}
>>


ENUMERATED_item_decode(p, sTag, nLevel, sItemID, sXerValue, bFirst) ::= <<
<if(!bFirst)>else <endif>if(strcmp(enmLabel,"<sXerValue>") == 0)
    <p> = <sItemID>;
>>

ENUMERATED_decode(p, sTag, nLevel, arrsItems) ::= <<
{
	char enmLabel[200];
	ret = Xer_DecodeEnumerated(pByteStrm, <sTag>, enmLabel, pErrCode);
    if (ret) {
        <arrsItems; separator="\n">
	    else {
		    *pErrCode = ERR_INVALID_XML_FILE;
		    return FALSE;
	    }
    }

}
>>


REAL_encode(p, sTag, nLevel) ::= <<
ret = Xer_EncodeReal(pByteStrm, <sTag>, <p>, pErrCode, <nLevel>);
>>

REAL_decode(p, sTag, nLevel) ::= <<
ret = Xer_DecodeReal(pByteStrm, <sTag>, <p>, pErrCode);
>>

IA5String_encode(p, sTag, nLevel) ::= <<
ret = Xer_EncodeString(pByteStrm, <sTag>, <p>, pErrCode, <nLevel>);
>>

IA5String_decode(p, sTag, nLevel) ::= <<
ret = Xer_DecodeString(pByteStrm, <sTag>, <p>, pErrCode);
>>


ReferenceType_encode(p, sName, sTag) ::= <<
ret = <sName>_XER_Encode_aux(<p>, <sTag>, pByteStrm, pErrCode, FALSE);
>>

ReferenceType_decode(p, sName, sTag) ::= <<
ret = <sName>_XER_Decode_aux(<p>, <sTag>, pByteStrm, pErrCode);
>>


NULL_encode() ::= ""
NULL_decode() ::= ""

OctetString_encode(p, sTag, nLevel, sCount, bIsFixedSize) ::= <<
ret = Xer_EncodeOctetString(pByteStrm, <sTag>, <p>arr, <sCount>, pErrCode, <nLevel>);
>>

OctetString_decode(p, sTag, nLevel, sCount, bIsFixedSize) ::= <<
ret = Xer_DecodeOctetString(pByteStrm, <sTag>, <p>arr, <if(!bIsFixedSize)>&<p>nCount<else>NULL<endif>, pErrCode);
>>


BitString_encode(p, sTag, nLevel, sCount, bIsFixedSize) ::= <<
ret = Xer_EncodeBitString(pByteStrm, <sTag>, <p>arr, <sCount>, pErrCode, <nLevel>);
>>

BitString_decode(p, sTag, nLevel, sCount, bIsFixedSize) ::= <<
ret = Xer_DecodeBitString(pByteStrm, <sTag>, <p>arr, <if(!bIsFixedSize)>&<p>nCount<else>NULL<endif>, pErrCode);
>>


CHOICE_child_encode(p, sChID, sChildBody, bFirst, sChildTag) ::= <<
case <sChID>:
	<sChildBody>
	break;
>>

CHOICE_no_tag_encode(p, arrsChildren) ::= <<
switch(<p>kind) 
{
    <arrsChildren; separator="\n">
    default:
	    *pErrCode = ERR_INVALID_XML_FILE;
        ret = FALSE;
}
>>


CHOICE_encode(p, sTag, nLevel, sMainBody) ::= <<
/* CHOICE Encode*/
ret = Xer_EncodeComplexElementStart(pByteStrm, <sTag>, NULL, pErrCode, <nLevel>);
if (ret) {
    <sMainBody>
    if (ret) {
        ret = Xer_EncodeComplexElementEnd(pByteStrm, <sTag>, pErrCode, <nLevel>);
    }
}
>>



CHOICE_child_decode(p, sChID, sChildBody, bFirst, sChildTag) ::= <<
<if(!bFirst)>else <endif>if (strcmp(nextTag, "<sChildTag>") == 0) {
    <p>kind = <sChID>;
    <sChildBody>
}
>>


CHOICE_no_tag_decode(p, arrsChildren) ::=<<
{
	char nextTag[256];
	ret = Xer_LA_NextElementTag(pByteStrm, nextTag);
	if (ret) {
		<arrsChildren; separator="\n"> 
        else {
            ret = FALSE;
            *pErrCode = ERR_INVALID_XML_FILE;
        }
	}
}
>>


CHOICE_decode(p, sTag, nLevel, sMainBody) ::= <<
/* CHOICE Decode*/
ret = Xer_DecodeComplexElementStart(pByteStrm, <sTag>, NULL, pErrCode);
if (ret) {
    <sMainBody>
    ret = Xer_DecodeComplexElementEnd(pByteStrm, <sTag>, pErrCode);
}
>>


SequenceOf_encode(p, sTag, nLevel, sI, sCount, sChildBody, bFixedSize) ::= <<
/* SEQUENCE OF Encode*/
ret = Xer_EncodeComplexElementStart(pByteStrm, <sTag>, NULL, pErrCode, <nLevel>);
if (ret) {
    for(<sI>=0;((<sI>\<<sCount>) && ret);<sI>++) 
    {
	    <sChildBody>
    }
    if (ret) {
        ret = Xer_EncodeComplexElementEnd(pByteStrm, <sTag>, pErrCode, <nLevel>);
    }
}
>>


SequenceOf_decode(p, sTag, nLevel, sI, sCount, sChildBody, bFixedSize) ::= <<
/* SEQUENCE OF Decode*/
ret = Xer_DecodeComplexElementStart(pByteStrm, <sTag>, NULL, pErrCode);
if (ret) {
    <if(!bFixedSize)><sCount> = 0;<endif>
    <sI> = 0;
    while(ret && !Xer_NextEndElementIs(pByteStrm, <sTag>))
    {
	    <sChildBody>
	    <sI>++;
	    <if(!bFixedSize)><sCount>++;<endif>
    }
    if (ret) {
        ret = Xer_DecodeComplexElementEnd(pByteStrm, <sTag>, pErrCode);
    }
}
>>



/* SEQUENCE Start*/

Sequence_mandatory_child_encode(sChName, sChildContent, sChildTag) ::= <<
/*Encode <sChName> */
<sChildContent>
>>

Sequence_mandatory_child_decode(sChName, sChildContent, sChildTag) ::= <<
/*Decode <sChName> */
ret = Xer_NextStartElementIs(pByteStrm, "<sChildTag>");
if (ret) {
	<sChildContent>
}
>>

Sequence_optional_child_encode(p, sChName, sChildContent, sChildTag) ::= <<
/*Encode <sChName> */
if (<p>exist.<sChName>) {
	<sChildContent>
}
>>

Sequence_optional_child_decode(p, sChName, sChildContent, sChildTag) ::= <<
/*Decode <sChName> */
<p>exist.<sChName> = 0;
if (Xer_NextStartElementIs(pByteStrm, "<sChildTag>")) {
	<p>exist.<sChName> = 1;
	<sChildContent>
}
>>

SEQUENCE_start_encode(sTag, nLevel) ::= <<
ret = Xer_EncodeComplexElementStart(pByteStrm, <sTag>, NULL, pErrCode, <nLevel>);
>>

SEQUENCE_start_decode(sTag, nLevel) ::= <<
ret = Xer_DecodeComplexElementStart(pByteStrm, <sTag>, NULL, pErrCode);
>>


SEQUENCE_end_encode(sTag, nLevel) ::= <<
ret = Xer_EncodeComplexElementEnd(pByteStrm, <sTag>, pErrCode, <nLevel>);
>>

SEQUENCE_end_decode(sTag, nLevel) ::= <<
ret = Xer_DecodeComplexElementEnd(pByteStrm, <sTag>, pErrCode);
>>


SEQUENCE_xer_encode(sChildren) ::= <<
/* SEQUENCE Encode*/
<sChildren>
>>

SEQUENCE_xer_decode(sChildren) ::= <<
/* SEQUENCE Decode*/
<sChildren>
>>








