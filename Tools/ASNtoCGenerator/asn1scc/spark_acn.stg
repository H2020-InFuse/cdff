/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/

group spark_acn:spark_spec;


PrintParam(sName, sDirection, sType) ::= "<sName> : <sDirection> <sType>"

TasEncodeMain(sName, bAcnEncodeFuncRequiresResult, arrsExtraParams, arrsExtraParamNames) ::= /*nogen*/<<
PROCEDURE <sName>_ACN_Encode(val:in <sName>; Stream : OUT <sName>_ACN_Stream<if(bAcnEncodeFuncRequiresResult)>; result : OUT <rtlModuleName()>.ASN1_RESULT<endif><if(arrsExtraParams)>; <arrsExtraParams; separator="; "><endif>)
IS
BEGIN
    Stream := <sName>_ACN_Stream'(K => 0, DataLen => 0, Data => <sName>_ACN_bit_array'(others => 0));
    <sName>_ACN_Encode_aux(val, Stream.Data, Stream.DataLen<if(bAcnEncodeFuncRequiresResult)>, result<endif><if(arrsExtraParamNames)>, <arrsExtraParamNames; separator=","><endif>);
END <sName>_ACN_Encode;
>>

Tas_encode(sName, bAcnEncodeFuncRequiresResult, arrsLocalVariables, sContent,  arrsAnnotations, arrsExtraParams, arrsExtraParamNames) ::= <<
PROCEDURE <sName>_ACN_Encode_aux(val:in <sName>; S : in out <rtlModuleName()>.BitArray; K : in out Natural<if(bAcnEncodeFuncRequiresResult)>; result : OUT <rtlModuleName()>.ASN1_RESULT<endif><if(arrsExtraParams)>; <arrsExtraParams; separator="; "><endif>)
<arrsAnnotations;separator="\n">
IS
    <arrsLocalVariables; separator="\n">
BEGIN
    <if(bAcnEncodeFuncRequiresResult)>
    result := <sName>_IsConstraintValid(val);
    IF result.success THEN
        --result.ErrorCode := <rtlModuleName()>.ERR_INCORRECT_DATA;
        <sContent>
    END IF;
    <else>
    <sContent>
    <endif>
END <sName>_ACN_Encode_aux;


<TasEncodeMain(sName=sName, bAcnEncodeFuncRequiresResult=bAcnEncodeFuncRequiresResult, arrsExtraParams=arrsExtraParams, arrsExtraParamNames=arrsExtraParamNames)>
>>

TasDecodeMain(sName, bAcnEncodeFuncRequiresResult, arrsExtraParams, arrsExtraParamNames) ::= /*nogen*/<<
PROCEDURE <sName>_ACN_Decode(val: out <sName>; Stream : IN <sName>_ACN_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT<if(arrsExtraParams)>; <arrsExtraParams; separator="; "><endif>)
IS
    iter:<rtlModuleName()>.DECODE_PARAMS;
BEGIN
    iter := <rtlModuleName()>.DECODE_PARAMS'(K => 0, DataLen => Stream.DataLen);
    <sName>_ACN_Decode_aux(val, Stream.Data, iter, result<if(arrsExtraParamNames)>, <arrsExtraParamNames; separator=","><endif>);
    result.Success := result.Success AND iter.K\<=iter.DataLen;
END <sName>_ACN_Decode;
>>

Tas_decode(sName, bAcnEncodeFuncRequiresResult, arrsLocalVariables, sContent,    arrsAnnotations, arrsExtraParams, arrsExtraParamNames) ::= <<
PROCEDURE <sName>_ACN_Decode_aux(val:out <sName>; S : in <rtlModuleName()>.BitArray; K : in out <rtlModuleName()>.DECODE_PARAMS; result : OUT <rtlModuleName()>.ASN1_RESULT<if(arrsExtraParams)>; <arrsExtraParams; separator="; "><endif>)
<arrsAnnotations;separator="\n">
IS
    <arrsLocalVariables; separator="\n">
BEGIN
    <sContent>
END <sName>_ACN_Decode_aux;

<TasDecodeMain(sName=sName, bAcnEncodeFuncRequiresResult=bAcnEncodeFuncRequiresResult, arrsExtraParams=arrsExtraParams, arrsExtraParamNames=arrsExtraParamNames)>
>>


PrintType_encode(sMainBody, bAligmentApplied, nAligmentValue, bHasDependencies, sDependencyUpdates) ::= <<
<if(bAligmentApplied)>
IF (K MOD <nAligmentValue>) /= 0 THEN
    K := K + (<nAligmentValue> - (K MOD <nAligmentValue>));
END IF;

<endif>
<if(bHasDependencies)>
<sDependencyUpdates>

<endif>
<sMainBody>
>>


PrintType_decode(sMainBody, bAligmentApplied, nAligmentValue, bHasDependencies, sDependencyUpdates) ::= <<
<if(bAligmentApplied)>
IF (K.K MOD <nAligmentValue>) /= 0 THEN
    K.K := K.K + (<nAligmentValue> - (K.K MOD <nAligmentValue>));
END IF;

<endif>
<sMainBody>
>>


PrintTypeNoUpdate_encode(sMainBody, bAligmentApplied, nAligmentValue) ::= <<
<PrintType_encode(sMainBody=sMainBody, bAligmentApplied=bAligmentApplied, nAligmentValue=nAligmentValue)>
>>
PrintTypeNoUpdate_decode(sMainBody, bAligmentApplied, nAligmentValue) ::= <<
<PrintType_decode(sMainBody=sMainBody, bAligmentApplied=bAligmentApplied, nAligmentValue=nAligmentValue)>
>>

loopFixedItem_enc (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
WHILE result.Success AND THEN <i>\<= <fixedSize>  LOOP
--# assert  <i> >=1 and <i>\<=<fixedSize>  and <fixedSize>\<= <nfixedSizeUperLimit> and
--#        K>=K~ and K\<=K~ + <nCurOffset> + <nAlignSize> + <nIntItemMaxSize>*(<i>-1);
    <sInternalItem>
    <i> := <i> + 1;
END LOOP;
>>


loopFixedItem_dec (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<    
WHILE result.Success AND THEN <i>\<= <fixedSize>   LOOP
--# assert  <i> >=1 and <i>\<=<fixedSize>  and <fixedSize>\<= <nfixedSizeUperLimit> and
--#        K.K>=K~.K and K.K\<=K~.K + <nCurOffset> + <nAlignSize> + <nIntItemMaxSize>*(<i>-1);
    <sInternalItem>
    <i> := <i> + 1;
END LOOP;
>>


/* Strings */



string_InternalItem_encode(p, i) ::=<<
charIndex := <rtlModuleName()>.CharacterPos(<p>(<i>));
<rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(charIndex), 0, 7);
>>


string_InternalItem_decode(p, i) ::=<<
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, charIndex, 0, 127, 7, result.Success);
<p>(<i>) := Character'Val(charIndex);
>>


str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_VarSize_encode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
length := <rtlModuleName()>.getStringSize(<p>);
result.Success := length >= <nSizeMin> AND length \<= <nSizeMax>;
IF result.Success THEN
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <rtlModuleName()>.Asn1Int(length), <nSizeMin>, <nSizeInBits>);
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize="length", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
END IF;
>>

str_VarSize_decode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA; 
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumberInt(S, K, length, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize="length", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


str_external_field_encode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax,  nIntItemMinSize, nIntItemMaxSize, sExtFld, nAlignSize) ::= <<
length := <rtlModuleName()>.getStringSize(<p>);
result.Success := length >= <nSizeMin> AND length \<= <nSizeMax>;
IF result.Success THEN
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize="length", nfixedSizeUperLimit = nSizeMax, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
END IF;
>>

str_external_field_decode(p, sTasName, i, sInternalItem, nSizeMin, nSizeMax,  nIntItemMinSize, nIntItemMaxSize, sExtFld, nAlignSize) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => <sExtFld> >= <nSizeMin> AND <sExtFld>\<=<nSizeMax>, ErrorCode => 0);
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=["Integer(",sExtFld,")"], nfixedSizeUperLimit = nSizeMax, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


bit_oct_sqf_external_field_encode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nIntItemMinSize, nIntItemMaxSize, sExtFld, nAlignSize) ::= <<
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>


bit_oct_sqf_external_field_decode(sTasName, p, i, sInternalItem, nSizeMin, nSizeMax, nIntItemMinSize, nIntItemMaxSize, sExtFld, nAlignSize) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => <nSizeMin>\<=<sExtFld> AND <sExtFld>\<=<nSizeMax>, ErrorCode => 0);
IF result.Success THEN
    <p>.Length := Integer(<sExtFld>);
    <loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=[p,".Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
END IF;
>>


RefTypeParam_tmpVar(sName, sTypeDecl) ::= "<sName>:<sTypeDecl>;"

ReferenceType1_encode(p, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= <<
<arrsLocalPrms, arrsArgs: {lp,arg|<if(arg)><lp> := <arg>;-- 3031<endif>}; separator="\n">
<sName>_ACN_Encode_aux(<p>, S, K<if(bAcnEncodeFuncRequiresResult)>, result<endif><if(arrsArgs)>, <arrsLocalPrms; separator=", "><endif>);
>>

ReferenceType1_decode(p, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= <<
<arrsLocalPrms, arrsArgs: {lp,arg|<if(arg)><lp> := <arg>; -- 3030<endif>}; separator="\n">
<sName>_ACN_Decode_aux(<p>, S, K, result<if(arrsArgs)>, <arrsLocalPrms; separator=", "><endif>);
>>

ReferenceType2_encode(p, sTasName, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= "<sTasName>.<ReferenceType1_encode(p=p, sName=sName, bAcnEncodeFuncRequiresResult = bAcnEncodeFuncRequiresResult, arrsArgs=arrsArgs, arrsLocalPrms=arrsLocalPrms)>"

ReferenceType2_decode(p, sTasName, sName, bAcnEncodeFuncRequiresResult, arrsArgs, arrsLocalPrms) ::= "<sTasName>.<ReferenceType1_decode(p=p, sName=sName, bAcnEncodeFuncRequiresResult = bAcnEncodeFuncRequiresResult, arrsArgs=arrsArgs, arrsLocalPrms=arrsLocalPrms)>"


/* SEQUENCE*/


Sequence_optChild_encode(p, sChName, sErrCode) ::= "<rtlModuleName()>.BitStream_AppendBit(S, K,<p>.Exist.<sChName>);"
Sequence_optChild_decode(p, sChName, sErrCode) ::= <<
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.BitStream_ReadBit(S, K,<p>.Exist.<sChName>, result.Success);
>>


Sequence_optChild_pres_bool_encode(p, sChName, sExtFldName) ::= ""
Sequence_optChild_pres_bool_decode(p, sChName, sExtFldName) ::= <<
IF <sExtFldName> THEN
    <p>.Exist.<sChName> := 1;
ELSE
    <p>.Exist.<sChName> := 0;
END IF;
>>

Sequence_optChild_pres_int_encode(p, sChName, sExtFldName, nIntVal) ::= ""
Sequence_optChild_pres_int_decode(p, sChName, sExtFldName, nIntVal) ::= <<
IF <sExtFldName> = <nIntVal> THEN
    <p>.Exist.<sChName> := 1;
ELSE
    <p>.Exist.<sChName> := 0;
END IF;
>>

Sequence_optChild_pres_str_encode(p, sChName, sExtFldName, sVal) ::= ""
Sequence_optChild_pres_str_decode(p, sChName, sExtFldName, sVal) ::= <<
IF <sExtFldName> = "<sVal>" THEN
    <p>.Exist.<sChName> := 1;
ELSE
    <p>.Exist.<sChName> := 0;
END IF;
>>


Sequence_Child_encode(p, sChName, bIsUperOptional, sChildContent, bHasDefaultValue) ::= <<
--Encode <sChName> 
<if(bIsUperOptional)>
IF <p>.Exist.<sChName> = 1 THEN
    <sChildContent>
END IF;
<else>
<sChildContent>
<endif>
>>


Sequence_Child_decode(p, sChName, bIsUperOptional, sChildContent, bHasDefaultValue) ::= <<
--Decode <sChName> 
<if(bIsUperOptional)>
IF <p>.Exist.<sChName> = 1 THEN
    <sChildContent>
<if(bHasDefaultValue)>
ELSE
    <p>.exist.<sChName> := 1; --default value taken from initialize

<endif>
END IF;
<else>
<sChildContent>
<endif>

>>


Sequence_encode(p, arrsChildren, sTasName, bRequiresInit, arrsDecOutParamsInit, bResultRequiresInit) ::= <<
<if(arrsChildren)>
<arrsChildren; separator="\n">

<else>
null;

<endif>
>>


PrmUpdate(sPrmName, sPrmInitValue) ::= "<sPrmName> := <sPrmInitValue>;"

Sequence_decode(p, arrsChildren, sTasName, bRequiresInit, arrsDecOutParamsInit, bResultRequiresInit) ::= <<
<if(bRequiresInit)>val := <sTasName>_Init;<endif>
<arrsDecOutParamsInit; separator="\n">
<if(bResultRequiresInit)>
result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);

<endif>
<arrsChildren; separator="\n">
>>



JoinItems_encode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresAssert,  bReqResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
<if(bRequiresAssert)>
--# assert K~+1>= S'First and K~ + <sTasName>_REQUIRED_BITS_FOR_ACN_ENCODING \<= S'Last AND
--#	       K>=K~ and K\<=K~+<nRequiredBitsSoFar>;

<endif>
<if(bReqResultCheck)>
IF result.Success THEN
    <sNestedPart>
END IF;
<else>
<sNestedPart>
<endif>
<endif>
>>


UpdateFailedPart()::="result.ErrorCode := <rtlModuleName()>.ERR_INCORRECT_DATA;"

JoinItems_decode(sTasName, sPart, sNestedPart, nRequiredBitsSoFar, bRequiresAssert, bReqResultCheck) ::= <<
<sPart>
<if(sNestedPart)>
<if(bRequiresAssert)>
--# assert K~.K+1>= S'First and K~.K + <sTasName>_REQUIRED_BITS_FOR_ACN_ENCODING \<= S'Last AND
--#	       K.K>=K~.K and K.K\<=K~.K+<nRequiredBitsSoFar>;	

<endif>
<if(bReqResultCheck)>
IF result.Success THEN
    <sNestedPart>
END IF;
<else>
<sNestedPart>
<endif>
<endif>
>>


/* Choice like uper*/

ChoiceChild_encode(sTasName, sName, sChildBody, nIndex, nIndexSizeInBits, sNamePresent) ::= <<
WHEN <sNamePresent> =>
    <rtlModuleName()>.UPER_Enc_ConstraintWholeNumber(S, K, <nIndex>, 0, <nIndexSizeInBits>);
    <sChildBody>
>>

ChoiceChild_decode(sTasName, sName, sChildBody, nIndex, nIndexSizeInBits, sNamePresent) ::= <<
WHEN <nIndex> =>
    <sChildBody>
    IF result.Success THEN
        val := <sTasName>_<sName>_set(<sName>_tmp);
    END IF;
>>

ChoiceChild_tmpVar(sName, sTypeDecl) ::= "<sName>_tmp:<sTypeDecl>;"

Choice_encode(sTasName, arrsChildren, nIndexMax, nIndexSizeInBits) ::= <<
CASE <sTasName>_kind(val) IS
    <arrsChildren; separator="\n">
END CASE;
>>

Declare_ChoiceIndex()::="index:<rtlModuleName()>.Asn1Int;"
Choice_decode(sTasName, arrsChildren, nIndexMax, nIndexSizeInBits) ::= <<
val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
<rtlModuleName()>.UPER_Dec_ConstraintWholeNumber(S, K, index, 0, <nIndexMax>, <nIndexSizeInBits>, result.Success);
IF result.Success THEN
    CASE <sTasName>_index_range(index) IS
        <arrsChildren; separator="\n">
    END CASE;
END IF;
>>


/* Choice with presense determinants */


ChoiceChild_preWhen_encode(sTasName, sName, sChildBody, arrsConditions, bFirst, sNamePresent) ::= <<
WHEN <sNamePresent> =>
    <sChildBody>
>>


ChoiceChild_preWhen_bool_condition(sExtFld) ::= "<sExtFld>"
ChoiceChild_preWhen_int_condition(sExtFld, nVal) ::= "<sExtFld> = <nVal>"
ChoiceChild_preWhen_str_condition(sExtFld, sVal) ::= "<sExtFld> = \"<sVal>\""

ChoiceChild_preWhen_decode(sTasName, sName, sChildBody, arrsConditions, bFirst, sNamePresent) ::= <<
<if(!bFirst)>ELS<endif>IF (<arrsConditions; separator=" AND ">) THEN
    <sChildBody>
    IF result.Success THEN
        val := <sTasName>_<sName>_set(<sName>_tmp);
    END IF;
>>


Choice_preWhen_encode(sTasName, arrsChildren) ::= <<
CASE <sTasName>_kind(val) IS
    <arrsChildren; separator="\n">
END CASE;
>>

Choice_preWhen_decode(sTasName, arrsChildren) ::= <<
val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => FALSE, ErrorCode => <rtlModuleName()>.ERR_INSUFFICIENT_DATA);
<arrsChildren; separator="\n">
END IF;
>>


/* Choice with Enum determinant */



ChoiceChild_Enum_encode(sTasName, sName, sEnumItem, sChildBody, sNamePresent) ::= <<
WHEN <sNamePresent> =>
    <sChildBody>
>>

ChoiceChild_Enum_decode(sTasName, sName, sEnumItem, sChildBody, sNamePresent) ::= <<
WHEN <sEnumItem> =>
    <sChildBody>
    IF result.Success THEN
        val := <sTasName>_<sName>_set(<sName>_tmp);
    END IF;
>>


Choice_Enum_encode(sTasName, arrsChildren, sEnmExtFld) ::= <<
CASE <sTasName>_kind(val) IS
    <arrsChildren; separator="\n">
END CASE;
>>

Choice_Enum_decode(sTasName, arrsChildren, sEnmExtFld) ::= <<
val := <sTasName>_Init;
CASE <sEnmExtFld> IS
    <arrsChildren; separator="\n">
END CASE;
>>


/* Updates */

PrintAcn_update_param(sTasName, bHasSuccess, sParamName, sContent, sParamType, arrsTmpVars) ::= <<
PROCEDURE <sTasName>_ACN_Encode_update_<sParamName>(val : IN <sTasName>; <sParamName>: OUT <sParamType><if(bHasSuccess)>; result : OUT <rtlModuleName()>.ASN1_RESULT<endif>)
---# derives <sParamName><if(bHasSuccess)>, result<endif> from val;
IS
    <arrsTmpVars; separator="\n">
BEGIN
    <sContent>
END <sTasName>_ACN_Encode_update_<sParamName>;
>>

PrintAcn_update_param_body_choice_child(sChildName, sChildUpdateStatement, bCheckSuccess, sChildNamePresent) ::= <<
WHEN <sChildNamePresent> =>	
    <sChildUpdateStatement>
<if(!bCheckSuccess)>    result := <rtlModuleName()>.ASN1_RESULT'(Success => TRUE, ErrorCode => 0);<endif>
>>

PrintAcn_update_param_body_choice(sTasName, arrsChildUpdateStatements) ::= <<
CASE <sTasName>_kind(val) IS
	<arrsChildUpdateStatements; separator="\n">
END CASE;
>>

PrintAcn_update_param_body(sPart, sNestedPart, bCheckSuccess) ::= <<
<sPart>
<if(sNestedPart)>
<if(bCheckSuccess)>
IF result.success THEN
    <sNestedPart>
END IF;
<else>
<sNestedPart>
<endif>
<endif>
>>



RefTypeArgument1(v, sTasName, sParamName, sRefTypePath, bHasSuccess) ::= <<
<sTasName>_ACN_Encode_update_<sParamName>(<sRefTypePath>, <v><if(bHasSuccess)>, result<endif>);
>>

RefTypeArgument2(v, sModName, sTasName, sParamName, sRefTypePath, bHasSuccess) ::= <<
<sModName>.<RefTypeArgument1(v=v, sTasName=sTasName, sParamName=sParamName, sRefTypePath=sRefTypePath, bHasSuccess=bHasSuccess)>
>>

SizeDependency(v, sCount) ::= "<v> := <rtlModuleName()>.Asn1Int(<sCount>);"


ChoiceDependencyEnum_Item(v, sChildCID, sEnumCName) ::= <<
WHEN <sChildCID> =>
	<v> := <sEnumCName>; 
>>

ChoiceDependencyEnum(sTasName, arrsChoiceEnumItems) ::= <<
CASE <sTasName>_kind(val) IS
    <arrsChoiceEnumItems; separator="\n">
END CASE;
>>


PresenceDependency(v, sSeqPath, sChildName) ::= <<
<v> := (<sSeqPath>.Exist.<sChildName> = 1);
>>

ChoiceDependencyIntPres_child(v, sChildName, nChildRetVal, sChildNamePresent) ::= <<
WHEN <sChildNamePresent> =>
	<v> := <nChildRetVal>; 
>>

ChoiceDependencyStrPres_child(v, sChildName, sChildRetVal, sChildNamePresent) ::= <<
WHEN <sChildNamePresent> =>
	<v> := "<sChildRetVal>" & <rtlModuleName()>.NUL; 
>>

ChoiceDependencyPres(sTasName, arrsChoiceItems) ::= <<
CASE <sTasName>_kind(val) IS
    <arrsChoiceItems; separator="\n">
END CASE;
>>



MultiUpdateCheckWithFirstValue(sCurValue, sFirstValue) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => <sCurValue> = <sFirstValue>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>

MultiUpdateCheckWithFirstValueInteger(sCurValue, sFirstValue) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => <sCurValue> = <sFirstValue>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>

MultiParamUpdateCheckWithFirstValue(sCurValue, sFirstValue) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => <sCurValue> = <sFirstValue>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>

CheckBeforeAssignToIntField_min_max(sTmpVar0, nMin, nMax) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => <sTmpVar0> >= <nMin> AND <sTmpVar0>\<=<nMax>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>
CheckBeforeAssignToIntField_max(sTmpVar0, nMax) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => <sTmpVar0>\<=<nMax>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>
CheckBeforeAssignToIntField_min(sTmpVar0, nMin) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => <sTmpVar0> >= <nMin>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>

UpdateAsn1Field(sAcnField, sTmpVar) ::= <<
<sAcnField> := <sTmpVar>; -- 23945
>>


UpdateAsn1IntegerField(sAcnField, sTmpVar0, sAsn1FieldType) ::= <<
<sAcnField> := <sTmpVar0>; -- 23946
>>


MultiUpdateCheckWithFirstValue2(sCurValue, sFirstValue) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => result.success AND <sCurValue> = <sFirstValue>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>

MultiParamUpdateCheckWithFirstValue2(sCurValue, sFirstValue) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => result.success AND <sCurValue> = <sFirstValue>, ErrorCode => <rtlModuleName()>.ERR_INCORRECT_DATA);
>>


